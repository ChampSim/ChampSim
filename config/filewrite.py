import difflib
import hashlib
import os
import json

from . import makefile

constants_file_name = 'champsim_constants.h'
instantiation_file_name = 'core_inst.inc'
core_modules_file_name = 'ooo_cpu_modules.inc'
cache_modules_file_name = 'cache_modules.inc'
makefile_file_name = '_configuration.mk'

cxx_generated_warning = '/***\n * THIS FILE IS AUTOMATICALLY GENERATED\n * Do not edit this file. It will be overwritten when the configure script is run.\n ***/\n\n'
make_generated_warning = '###\n# THIS FILE IS AUTOMATICALLY GENERATED\n# Do not edit this file. It will be overwritten when the configure script is run.\n###\n\n'

def write_if_different(fname, new_file_string):
    ratio = 0
    if os.path.exists(fname):
        with open(fname, 'rt') as rfp:
            f = list(l.strip() for l in rfp)
        new_file_lines = list(l.strip() for l in new_file_string.splitlines())
        ratio = difflib.SequenceMatcher(a=f, b=new_file_lines).ratio()

    if ratio < 1:
        with open(fname, 'wt') as wfp:
            wfp.write(new_file_string)

def get_map_string(fname_map):
    return '\n'.join('#define {} {}'.format(*x) for x in fname_map.items()) + '\n'

def write_files(iterable):
    makefile_parts = []

    ids = {hashlib.shake_128(json.dumps(x[:-2]).encode('utf-8')).hexdigest(4): x for x in iterable}

    for build_id, build in ids.items():
        executable, inst, core_modules, cache_modules, const, module_info, env, bindir_name, srcdir_names, objdir_name = build

        inc_dir = os.path.normpath(os.path.join(objdir_name, build_id, 'inc'))
        os.makedirs(inc_dir, exist_ok=True)

        for module in module_info.values():
            write_if_different(os.path.join(inc_dir, module['name'] + '.inc'), cxx_generated_warning + get_map_string(module['func_map']))

        write_if_different(os.path.join(inc_dir, instantiation_file_name), cxx_generated_warning + inst)
        write_if_different(os.path.join(inc_dir, core_modules_file_name), cxx_generated_warning + core_modules)
        write_if_different(os.path.join(inc_dir, cache_modules_file_name), cxx_generated_warning + cache_modules)
        write_if_different(os.path.join(inc_dir, constants_file_name), cxx_generated_warning + const)
        makefile_parts.append(makefile.get_makefile_string(objdir_name, build_id, os.path.normpath(os.path.join(bindir_name, executable)), srcdir_names, module_info, env))

    write_if_different(makefile_file_name, make_generated_warning + '\n#####\n\n'.join(makefile_parts))

