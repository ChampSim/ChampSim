name: Run Tests

on:
  push:
    branches:
      - master
      - develop
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - '.github/workflows/*.yml'
      # re-include current file to not be excluded
      - '!.github/workflows/test.yml'

  pull_request:
    branches:
      - master
      - develop
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - '.github/workflows/*.yml'
      # re-include current file to not be excluded
      - '!.github/workflows/test.yml'

jobs:
  cpp:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      CXX: ${{ matrix.config.cxx }}

    strategy:
      fail-fast: false
      matrix:
        config:
        # GCC-9
        - {
            name: "Ubuntu 20.04 GCC 9",
            os: ubuntu-20.04,
            cxx: "g++-9",
          }
        - {
            name: "Ubuntu 22.04 GCC 9",
            os: ubuntu-22.04,
            cxx: "g++-9",
          }

        # GCC-10
        - {
            name: "Ubuntu 20.04 GCC 10",
            os: ubuntu-20.04,
            cxx: "g++-10",
          }
        - {
            name: "Ubuntu 22.04 GCC 10",
            os: ubuntu-22.04,
            cxx: "g++-10",
          }

        # GCC-11
        - {
            name: "Ubuntu 22.04 GCC 11",
            os: ubuntu-22.04,
            cxx: "g++-11",
            coverage: true,
          }

        # Clang-10
        - {
            name: "Ubuntu 20.04 Clang 10",
            os: ubuntu-20.04,
            cxx: "clang++-10",
          }

        # Clang-11
        - {
            name: "Ubuntu 20.04 Clang 11",
            os: ubuntu-20.04,
            cxx: "clang++-11",
          }

        # Clang-12
        - {
            name: "Ubuntu 20.04 Clang 12",
            os: ubuntu-20.04,
            cxx: "clang++-12",
          }
        - {
            name: "Ubuntu 22.04 Clang 12",
            os: ubuntu-22.04,
            cxx: "clang++-12",
          }

        # Clang-13
        - {
            name: "Ubuntu 22.04 Clang 13",
            os: ubuntu-22.04,
            cxx: "clang++-13",
          }

        # Clang-14
        - {
            name: "Ubuntu 22.04 Clang 14",
            os: ubuntu-22.04,
            cxx: "clang++-14",
          }

        # AppleClang
        - {
            name: "macOS Clang",
            os: macos-latest,
            cxx: "clang++",
          }

        # MSVC 2022
        #- {
        #name: "Windows MSVC 2022",
        #os: windows-latest,
        #cxx: "cl",
        #environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
        #}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Set up pkg-config
      if: startsWith(matrix.config.os, 'macos')
      run: brew install pkg-config

    - name: Set up vcpkg
      run: |
        vcpkg/bootstrap-vcpkg.sh
        vcpkg/vcpkg install

    - name: Set Coverage Environment
      if: ${{ matrix.config.coverage }}
      run: |
        sudo apt-get install lcov
        echo "CXXFLAGS=--coverage" >> $GITHUB_ENV
        echo "LDFLAGS=--coverage" >> $GITHUB_ENV

    - name: Configure
      run: ./config.sh

    - name: Make
      run: make $(pwd)/test/bin/000-test-main

    - name: Run
      run: test/bin/000-test-main --order rand --warn NoAssertions --invisibles

    - name: Capture LCOV
      if: ${{ matrix.config.coverage }}
      run: |
        lcov --capture --no-external \
        --directory . \
        --exclude $(pwd)/.csconfig/\* \
        --exclude $(pwd)/test/\* \
        --exclude $(pwd)/tracer/\* \
        --exclude $(pwd)/vcpkg_installed/\* \
        --output-file lcov_cpp.info

    - uses: actions/upload-artifact@v3.1.2
      if: ${{ matrix.config.coverage }}
      with:
        name: lcov-cpp
        path: lcov_cpp.info

  python:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up coverage
      run: python -m pip install coverage

    - name: Run
      run: |
        PYTHONPATH=$PYTHONPATH:$(pwd) coverage run --source=config -m unittest discover -v --start-directory='test/python'
        coverage lcov --include=config/\*.py --omit=*/__*__.py -o lcov_python.info

    - uses: actions/upload-artifact@v3.1.2
      with:
        name: lcov-python
        path: lcov_python.info

  json_output:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Set up
      run: |
        vcpkg/bootstrap-vcpkg.sh
        vcpkg/vcpkg install
        sudo apt-get install lcov

    - name: Configure
      run: ./config.sh

    - name: Make
      run: make
      env:
        CXXFLAGS: "--coverage"
        LDFLAGS: "--coverage"

    - name: Produce JSON
      run: ./bin/champsim -w5000 -i5000 --json=test.json -- <(curl -s https://dpc3.compas.cs.stonybrook.edu/champsim-traces/speccpu/400.perlbench-41B.champsimtrace.xz | xz -dc)

    - name: Validate JSON
      run: python3 -m json.tool test.json

    - name: Capture LCOV
      run: |
        lcov --capture --no-external \
        --directory . \
        --include $(pwd)/src/json_printer.cc \
        --include $(pwd)/inc/stats_printer.h \
        --output-file lcov_json.info

    - uses: actions/upload-artifact@v3.1.2
      with:
        name: lcov-json
        path: lcov_json.info

  upload_coveralls:
    runs-on: ubuntu-latest
    needs: [cpp, python, json_output]
    steps:
    - uses: actions/checkout@v3

    - name: Set Coverage Environment
      run: sudo apt-get install lcov

    - uses: actions/download-artifact@v3
      with:
        name: lcov-cpp

    - uses: actions/download-artifact@v3
      with:
        name: lcov-python

    - uses: actions/download-artifact@v3
      with:
        name: lcov-json

    - name: Merge coverage
      run: lcov --add-tracefile lcov_cpp.info --add-tracefile lcov_python.info --add-tracefile lcov_json.info --output-file lcov.info

    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: lcov.info
