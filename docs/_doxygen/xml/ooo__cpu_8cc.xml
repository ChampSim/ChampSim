<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="ooo__cpu_8cc" kind="file" language="C++">
    <compoundname>ooo_cpu.cc</compoundname>
    <includes refid="ooo__cpu_8h" local="yes">ooo_cpu.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">chrono</includes>
    <includes local="no">cmath</includes>
    <includes local="no">numeric</includes>
    <includes refid="cache_8h" local="yes">cache.h</includes>
    <includes refid="champsim_8h" local="yes">champsim.h</includes>
    <includes refid="deadlock_8h" local="yes">deadlock.h</includes>
    <includes refid="instruction_8h" local="yes">instruction.h</includes>
    <includes local="yes">util/span.h</includes>
    <includes local="no">fmt/chrono.h</includes>
    <includes local="no">fmt/core.h</includes>
    <includes local="no">fmt/ranges.h</includes>
    <incdepgraph>
      <node id="31">
        <label>cache.h</label>
        <link refid="cache_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>champsim.h</label>
        <link refid="champsim_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>channel.h</label>
        <link refid="channel_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>deadlock.h</label>
        <link refid="deadlock_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>instruction.h</label>
        <link refid="instruction_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>module_impl.h</label>
        <link refid="module__impl_8h_source"/>
      </node>
      <node id="2">
        <label>ooo_cpu.h</label>
        <link refid="ooo__cpu_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>operable.h</label>
        <link refid="operable_8h_source"/>
      </node>
      <node id="21">
        <label>trace_instruction.h</label>
        <link refid="trace__instruction_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ooo_cpu.cc</label>
        <link refid="ooo__cpu_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="4">
        <label>bitset</label>
      </node>
      <node id="33">
        <label>cache_module_decl.inc</label>
      </node>
      <node id="34">
        <label>cache_module_def.inc</label>
      </node>
      <node id="15">
        <label>champsim_constants.h</label>
      </node>
      <node id="28">
        <label>chrono</label>
      </node>
      <node id="29">
        <label>cmath</label>
      </node>
      <node id="13">
        <label>cstdint</label>
      </node>
      <node id="5">
        <label>deque</label>
      </node>
      <node id="14">
        <label>exception</label>
      </node>
      <node id="40">
        <label>fmt/chrono.h</label>
      </node>
      <node id="36">
        <label>fmt/core.h</label>
      </node>
      <node id="37">
        <label>fmt/ranges.h</label>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="6">
        <label>limits</label>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
      <node id="30">
        <label>numeric</label>
      </node>
      <node id="26">
        <label>ooo_cpu_module_decl.inc</label>
      </node>
      <node id="27">
        <label>ooo_cpu_module_def.inc</label>
      </node>
      <node id="8">
        <label>optional</label>
      </node>
      <node id="9">
        <label>queue</label>
      </node>
      <node id="10">
        <label>stdexcept</label>
      </node>
      <node id="32">
        <label>string</label>
      </node>
      <node id="18">
        <label>string_view</label>
      </node>
      <node id="25">
        <label>type_traits</label>
      </node>
      <node id="24">
        <label>util/lru_table.h</label>
      </node>
      <node id="39">
        <label>util/span.h</label>
      </node>
      <node id="38">
        <label>util/type_traits.h</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="ooo__cpu_8cc_1ab06bf0fc55a22019b65e09d1dd724505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::chrono::seconds</type>
        <definition>std::chrono::seconds elapsed_time</definition>
        <argsstring>()</argsstring>
        <name>elapsed_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/ooo_cpu.cc" line="33" column="22" bodyfile="/github/workspace/src/champsim.cc" bodystart="36" bodyend="36" declfile="/github/workspace/src/ooo_cpu.cc" declline="33" declcolumn="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Copyright<sp/>2023<sp/>The<sp/>ChampSim<sp/>Contributors</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ooo_cpu.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cache.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;champsim.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;deadlock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;instruction.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;util/span.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/chrono.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/ranges.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">std::chrono::seconds<sp/>elapsed_time();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::operate()</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>progress{0};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>retire_rob();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retire</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>complete_inflight_instruction();<sp/></highlight><highlight class="comment">//<sp/>finalize<sp/>execution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>execute_instruction();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>instructions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>schedule_instruction();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>schedule<sp/>instructions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>handle_memory_return();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finalize<sp/>memory<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>operate_lsq();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>memory<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>dispatch_instruction();<sp/></highlight><highlight class="comment">//<sp/>dispatch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>decode_instruction();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>promote_to_decode();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>fetch_instruction();<sp/></highlight><highlight class="comment">//<sp/>fetch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>check_dib();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>initialize_instruction();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>heartbeat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show_heartbeat<sp/>&amp;&amp;<sp/>(num_retired<sp/>&gt;=<sp/>next_print_instruction))<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>heartbeat_instr{std::ceil(num_retired<sp/>-<sp/>last_heartbeat_instr)};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>heartbeat_cycle{std::ceil(current_cycle<sp/>-<sp/>last_heartbeat_cycle)};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>phase_instr{std::ceil(num_retired<sp/>-<sp/>begin_phase_instr)};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>phase_cycle{std::ceil(current_cycle<sp/>-<sp/>begin_phase_cycle)};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;Heartbeat<sp/>CPU<sp/>{}<sp/>instructions:<sp/>{}<sp/>cycles:<sp/>{}<sp/>heartbeat<sp/>IPC:<sp/>{:.4g}<sp/>cumulative<sp/>IPC:<sp/>{:.4g}<sp/>(Simulation<sp/>time:<sp/>{:%H<sp/>hr<sp/>%M<sp/>min<sp/>%S<sp/>sec})\n&quot;</highlight><highlight class="normal">,<sp/>cpu,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_retired,<sp/>current_cycle,<sp/>heartbeat_instr<sp/>/<sp/>heartbeat_cycle,<sp/>phase_instr<sp/>/<sp/>phase_cycle,<sp/>elapsed_time());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>next_print_instruction<sp/>+=<sp/>STAT_PRINTING_PERIOD;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>last_heartbeat_instr<sp/>=<sp/>num_retired;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>last_heartbeat_cycle<sp/>=<sp/>current_cycle;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>progress;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::initialize()</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>BRANCH<sp/>PREDICTOR<sp/>&amp;<sp/>BTB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>impl_initialize_branch_predictor();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>impl_initialize_btb();</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::begin_phase()</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>begin_phase_instr<sp/>=<sp/>num_retired;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>begin_phase_cycle<sp/>=<sp/>current_cycle;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>where<sp/>the<sp/>next<sp/>phase<sp/>begins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>stats_type<sp/>stats;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>stats.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CPU<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(cpu);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>stats.begin_instrs<sp/>=<sp/>num_retired;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>stats.begin_cycles<sp/>=<sp/>current_cycle;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>sim_stats<sp/>=<sp/>stats;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::end_phase(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>finished_cpu)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>where<sp/>the<sp/>phase<sp/>ended<sp/>(overwrite<sp/>if<sp/>this<sp/>is<sp/>later)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>sim_stats.end_instrs<sp/>=<sp/>num_retired;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>sim_stats.end_cycles<sp/>=<sp/>current_cycle;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finished_cpu<sp/>==<sp/>this-&gt;cpu)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>finish_phase_instr<sp/>=<sp/>num_retired;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>finish_phase_cycle<sp/>=<sp/>current_cycle;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>roi_stats<sp/>=<sp/>sim_stats;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::initialize_instruction()</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>instrs_to_read_this_cycle<sp/>=<sp/>std::min(FETCH_WIDTH,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(IFETCH_BUFFER_SIZE<sp/>-<sp/>std::size(IFETCH_BUFFER)));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current_cycle<sp/>&gt;=<sp/>fetch_resume_cycle<sp/>&amp;&amp;<sp/>instrs_to_read_this_cycle<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>!std::empty(input_queue))<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>instrs_to_read_this_cycle--;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stop_fetch<sp/>=<sp/>do_init_instruction(input_queue.front());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stop_fetch)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>instrs_to_read_this_cycle<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>to<sp/>IFETCH_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>IFETCH_BUFFER.push_back(input_queue.front());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>input_queue.pop_front();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>IFETCH_BUFFER.back().event_cycle<sp/>=<sp/>current_cycle;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_stack_pointer_folding(<ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>arch_instr)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>exact,<sp/>true<sp/>value<sp/>of<sp/>the<sp/>stack<sp/>pointer<sp/>for<sp/>any<sp/>given<sp/>instruction<sp/>can<sp/>usually<sp/>be<sp/>determined<sp/>immediately<sp/>after<sp/>the<sp/>instruction<sp/>is<sp/>decoded<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>waiting<sp/>for<sp/>the<sp/>stack<sp/>pointer&apos;s<sp/>dependency<sp/>chain<sp/>to<sp/>be<sp/>resolved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writes_sp<sp/>=<sp/>std::count(std::begin(arch_instr.destination_registers),<sp/>std::end(arch_instr.destination_registers),<sp/>champsim::REG_STACK_POINTER);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writes_sp)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>creating<sp/>register<sp/>dependencies<sp/>on<sp/>the<sp/>stack<sp/>pointer<sp/>for<sp/>calls,<sp/>returns,<sp/>pushes,<sp/>and<sp/>pops,<sp/>but<sp/>not<sp/>for<sp/>variable-sized<sp/>changes<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stack<sp/>pointer<sp/>position.<sp/>reads_other<sp/>indicates<sp/>that<sp/>the<sp/>stack<sp/>pointer<sp/>is<sp/>being<sp/>changed<sp/>by<sp/>a<sp/>variable<sp/>amount,<sp/>which<sp/>can&apos;t<sp/>be<sp/>determined<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>execution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reads_other<sp/>=<sp/>std::count_if(std::begin(arch_instr.source_registers),<sp/>std::end(arch_instr.source_registers),<sp/>[](uint8_t<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>r<sp/>!=<sp/>champsim::REG_STACK_POINTER<sp/>&amp;&amp;<sp/>r<sp/>!=<sp/>champsim::REG_FLAGS<sp/>&amp;&amp;<sp/>r<sp/>!=<sp/>champsim::REG_INSTRUCTION_POINTER;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((arch_instr.is_branch<sp/>!=<sp/>0)<sp/>||<sp/>!(std::empty(arch_instr.destination_memory)<sp/>&amp;&amp;<sp/>std::empty(arch_instr.source_memory))<sp/>||<sp/>(!reads_other))<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nonsp_end<sp/>=<sp/>std::remove(std::begin(arch_instr.destination_registers),<sp/>std::end(arch_instr.destination_registers),<sp/>champsim::REG_STACK_POINTER);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arch_instr.destination_registers.erase(nonsp_end,<sp/>std::end(arch_instr.destination_registers));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>O3_CPU::do_predict_branch(<ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>arch_instr)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stop_fetch<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>branch<sp/>prediction<sp/>for<sp/>all<sp/>instructions<sp/>as<sp/>at<sp/>this<sp/>point<sp/>we<sp/>do<sp/>not<sp/>know<sp/>if<sp/>the<sp/>instruction<sp/>is<sp/>a<sp/>branch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>sim_stats.total_branch_types[arch_instr.branch_type]++;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[predicted_branch_target,<sp/>always_taken]<sp/>=<sp/>impl_btb_prediction(arch_instr.ip);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>arch_instr.branch_prediction<sp/>=<sp/>impl_predict_branch(arch_instr.ip)<sp/>||<sp/>always_taken;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch_instr.branch_prediction<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>predicted_branch_target<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch_instr.is_branch)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[BRANCH]<sp/>instr_id:<sp/>{}<sp/>ip:<sp/>{:#x}<sp/>taken:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>arch_instr.instr_id,<sp/>arch_instr.ip,<sp/>arch_instr.branch_taken);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>code<sp/>prefetcher<sp/>every<sp/>time<sp/>the<sp/>branch<sp/>predictor<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>l1i-&gt;impl_prefetcher_branch_operate(arch_instr.ip,<sp/>arch_instr.branch_type,<sp/>predicted_branch_target);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predicted_branch_target<sp/>!=<sp/>arch_instr.branch_target</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(((arch_instr.branch_type<sp/>==<sp/>BRANCH_CONDITIONAL)<sp/>||<sp/>(arch_instr.branch_type<sp/>==<sp/>BRANCH_OTHER))</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>arch_instr.branch_taken<sp/>!=<sp/>arch_instr.branch_prediction))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>conditional<sp/>branches<sp/>are<sp/>re-evaluated<sp/>at<sp/>decode<sp/>when<sp/>the<sp/>target<sp/>is<sp/>computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sim_stats.total_rob_occupancy_at_branch_mispredict<sp/>+=<sp/>std::size(ROB);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sim_stats.branch_type_misses[arch_instr.branch_type]++;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!warmup)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fetch_resume_cycle<sp/>=<sp/>std::numeric_limits&lt;uint64_t&gt;::max();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_fetch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arch_instr.branch_mispredicted<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stop_fetch<sp/>=<sp/>arch_instr.branch_taken;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>correctly<sp/>predicted<sp/>taken,<sp/>then<sp/>we<sp/>can&apos;t<sp/>fetch<sp/>anymore<sp/>instructions<sp/>this<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>impl_update_btb(arch_instr.ip,<sp/>arch_instr.branch_target,<sp/>arch_instr.branch_taken,<sp/>arch_instr.branch_type);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>impl_last_branch_result(arch_instr.ip,<sp/>arch_instr.branch_target,<sp/>arch_instr.branch_taken,<sp/>arch_instr.branch_type);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stop_fetch;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>O3_CPU::do_init_instruction(<ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>arch_instr)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fast<sp/>warmup<sp/>eliminates<sp/>register<sp/>dependencies<sp/>between<sp/>instructions<sp/>branch<sp/>predictor,<sp/>cache<sp/>contents,<sp/>and<sp/>prefetchers<sp/>are<sp/>still<sp/>warmed<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(warmup)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>arch_instr.source_registers.clear();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>arch_instr.destination_registers.clear();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>::do_stack_pointer_folding(arch_instr);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_predict_branch(arch_instr);</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::check_dib()</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>through<sp/>IFETCH_BUFFER<sp/>to<sp/>find<sp/>instructions<sp/>that<sp/>hit<sp/>in<sp/>the<sp/>decoded<sp/>instruction<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>std::find_if(std::begin(IFETCH_BUFFER),<sp/>std::end(IFETCH_BUFFER),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!x.dib_checked;<sp/>});</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[window_begin,<sp/>window_end]<sp/>=<sp/>champsim::get_span(begin,<sp/>std::end(IFETCH_BUFFER),<sp/>FETCH_WIDTH);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>std::for_each(window_begin,<sp/>window_end,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ifetch_entry){<sp/>this-&gt;do_check_dib(ifetch_entry);<sp/>});</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::distance(window_begin,<sp/>window_end);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::do_check_dib(<ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>instr)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>DIB<sp/>to<sp/>see<sp/>if<sp/>we<sp/>recently<sp/>fetched<sp/>this<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dib_result<sp/>=<sp/>DIB.check_hit(instr.ip);<sp/>dib_result)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>cache<sp/>line<sp/>is<sp/>in<sp/>the<sp/>L0,<sp/>so<sp/>we<sp/>can<sp/>mark<sp/>this<sp/>as<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>instr.fetched<sp/>=<sp/>COMPLETED;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>mark<sp/>it<sp/>as<sp/>decoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>instr.decoded<sp/>=<sp/>COMPLETED;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>be<sp/>acted<sp/>on<sp/>immediately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>instr.event_cycle<sp/>=<sp/>current_cycle;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>instr.dib_checked<sp/>=<sp/>COMPLETED;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::fetch_instruction()</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>progress{0};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fetch<sp/>a<sp/>single<sp/>cache<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fetch_ready<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.dib_checked<sp/>==<sp/>COMPLETED<sp/>&amp;&amp;<sp/>!x.fetched;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>chunk<sp/>of<sp/>instructions<sp/>in<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>no_match_ip<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs.ip<sp/>&gt;&gt;<sp/>LOG2_BLOCK_SIZE)<sp/>!=<sp/>(rhs.ip<sp/>&gt;&gt;<sp/>LOG2_BLOCK_SIZE);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>l1i_req_begin<sp/>=<sp/>std::find_if(std::begin(IFETCH_BUFFER),<sp/>std::end(IFETCH_BUFFER),<sp/>fetch_ready);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_read<sp/>=<sp/>L1I_BANDWIDTH;<sp/>to_read<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>l1i_req_begin<sp/>!=<sp/>std::end(IFETCH_BUFFER);<sp/>--to_read)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>l1i_req_end<sp/>=<sp/>std::adjacent_find(l1i_req_begin,<sp/>std::end(IFETCH_BUFFER),<sp/>no_match_ip);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l1i_req_end<sp/>!=<sp/>std::end(IFETCH_BUFFER))</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l1i_req_end<sp/>=<sp/>std::next(l1i_req_end);<sp/></highlight><highlight class="comment">//<sp/>adjacent_find<sp/>returns<sp/>the<sp/>first<sp/>of<sp/>the<sp/>non-equal<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Issue<sp/>to<sp/>L1I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>do_fetch_instruction(l1i_req_begin,<sp/>l1i_req_end);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::for_each(l1i_req_begin,<sp/>l1i_req_end,<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/>x.fetched<sp/>=<sp/>INFLIGHT;<sp/>});</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++progress;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>l1i_req_begin<sp/>=<sp/>std::find_if(l1i_req_end,<sp/>std::end(IFETCH_BUFFER),<sp/>fetch_ready);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>progress;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>O3_CPU::do_fetch_instruction(std::deque&lt;ooo_model_instr&gt;::iterator<sp/>begin,<sp/>std::deque&lt;ooo_model_instr&gt;::iterator<sp/>end)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>CacheBus::request_type<sp/>fetch_packet;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>fetch_packet.v_address<sp/>=<sp/>begin-&gt;ip;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>fetch_packet.instr_id<sp/>=<sp/>begin-&gt;instr_id;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>fetch_packet.ip<sp/>=<sp/>begin-&gt;ip;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>fetch_packet.instr_depend_on_me<sp/>=<sp/>{begin,<sp/>end};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[IFETCH]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>ip:<sp/>{:#x}<sp/>dependents:<sp/>{}<sp/>event_cycle:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>begin-&gt;instr_id,<sp/>begin-&gt;ip,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size(fetch_packet.instr_depend_on_me),<sp/>begin-&gt;event_cycle);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L1I_bus.issue_read(fetch_packet);</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::promote_to_decode()</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>available_fetch_bandwidth<sp/>=<sp/>std::min&lt;long&gt;(FETCH_WIDTH,<sp/>DECODE_BUFFER_SIZE<sp/>-<sp/>std::size(DECODE_BUFFER));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[window_begin,<sp/>window_end]<sp/>=<sp/>champsim::get_span_p(std::begin(IFETCH_BUFFER),<sp/>std::end(IFETCH_BUFFER),<sp/>available_fetch_bandwidth,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[cycle<sp/>=<sp/>current_cycle](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.fetched<sp/>==<sp/>COMPLETED<sp/>&amp;&amp;<sp/>x.event_cycle<sp/>&lt;=<sp/>cycle;<sp/>});</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>progress{std::distance(window_begin,<sp/>window_end)};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>std::for_each(window_begin,<sp/>window_end,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[cycle<sp/>=<sp/>current_cycle,<sp/>lat<sp/>=<sp/>DECODE_LATENCY,<sp/>warmup<sp/>=<sp/>warmup](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.event_cycle<sp/>=<sp/>cycle<sp/>+<sp/>((warmup<sp/>||<sp/>x.decoded)<sp/>?<sp/>0<sp/>:<sp/>lat);<sp/>});</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>std::move(window_begin,<sp/>window_end,<sp/>std::back_inserter(DECODE_BUFFER));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>IFETCH_BUFFER.erase(window_begin,<sp/>window_end);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>progress;</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::decode_instruction()</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>available_decode_bandwidth<sp/>=<sp/>std::min&lt;long&gt;(DECODE_WIDTH,<sp/>DISPATCH_BUFFER_SIZE<sp/>-<sp/>std::size(DISPATCH_BUFFER));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[window_begin,<sp/>window_end]<sp/>=<sp/>champsim::get_span_p(std::begin(DECODE_BUFFER),<sp/>std::end(DECODE_BUFFER),<sp/>available_decode_bandwidth,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[cycle<sp/>=<sp/>current_cycle](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.event_cycle<sp/>&lt;=<sp/>cycle;<sp/>});</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>progress{std::distance(window_begin,<sp/>window_end)};</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>decoded<sp/>instructions<sp/>to<sp/>dispatch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>std::for_each(window_begin,<sp/>window_end,<sp/>[&amp;,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>db_entry)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;do_dib_update(db_entry);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resume<sp/>fetch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(db_entry.branch_mispredicted)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>branches<sp/>detect<sp/>the<sp/>misprediction<sp/>at<sp/>decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((db_entry.branch_type<sp/>==<sp/>BRANCH_DIRECT_JUMP)<sp/>||<sp/>(db_entry.branch_type<sp/>==<sp/>BRANCH_DIRECT_CALL)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(((db_entry.branch_type<sp/>==<sp/>BRANCH_CONDITIONAL)<sp/>||<sp/>(db_entry.branch_type<sp/>==<sp/>BRANCH_OTHER))<sp/>&amp;&amp;<sp/>db_entry.branch_taken<sp/>==<sp/>db_entry.branch_prediction))<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>branch_mispredicted<sp/>bit<sp/>so<sp/>we<sp/>don&apos;t<sp/>attempt<sp/>to<sp/>resume<sp/>fetch<sp/>again<sp/>at<sp/>execute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>db_entry.branch_mispredicted<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pay<sp/>misprediction<sp/>penalty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;fetch_resume_cycle<sp/>=<sp/>this-&gt;current_cycle<sp/>+<sp/>BRANCH_MISPREDICT_PENALTY;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>to<sp/>dispatch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>db_entry.event_cycle<sp/>=<sp/>this-&gt;current_cycle<sp/>+<sp/>(this-&gt;warmup<sp/>?<sp/>0<sp/>:<sp/>this-&gt;DISPATCH_LATENCY);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>std::move(window_begin,<sp/>window_end,<sp/>std::back_inserter(DISPATCH_BUFFER));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>DECODE_BUFFER.erase(window_begin,<sp/>window_end);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>progress;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::do_dib_update(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>instr)<sp/>{<sp/>DIB.fill(instr.ip);<sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::dispatch_instruction()</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>available_dispatch_bandwidth<sp/>=<sp/>DISPATCH_WIDTH;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dispatch<sp/>DISPATCH_WIDTH<sp/>instructions<sp/>into<sp/>the<sp/>ROB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(available_dispatch_bandwidth<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>!std::empty(DISPATCH_BUFFER)<sp/>&amp;&amp;<sp/>DISPATCH_BUFFER.front().event_cycle<sp/>&lt;<sp/>current_cycle<sp/>&amp;&amp;<sp/>std::size(ROB)<sp/>!=<sp/>ROB_SIZE</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>((std::size_t)std::count_if(std::begin(LQ),<sp/>std::end(LQ),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lq_entry)<sp/>{<sp/>return<sp/>!lq_entry.has_value();<sp/>})</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;=<sp/>std::size(DISPATCH_BUFFER.front().source_memory))</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>((std::size(DISPATCH_BUFFER.front().destination_memory)<sp/>+<sp/>std::size(SQ))<sp/>&lt;=<sp/>SQ_SIZE))<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>ROB.push_back(std::move(DISPATCH_BUFFER.front()));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>DISPATCH_BUFFER.pop_front();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>do_memory_scheduling(ROB.back());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>available_dispatch_bandwidth--;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DISPATCH_WIDTH<sp/>-<sp/>available_dispatch_bandwidth;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::schedule_instruction()</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_bw<sp/>=<sp/>SCHEDULER_SIZE;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>progress{0};</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rob_it<sp/>=<sp/>std::begin(ROB);<sp/>rob_it<sp/>!=<sp/>std::end(ROB)<sp/>&amp;&amp;<sp/>search_bw<sp/>&gt;<sp/>0;<sp/>++rob_it)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rob_it-&gt;scheduled<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>do_scheduling(*rob_it);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++progress;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rob_it-&gt;executed<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--search_bw;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>progress;</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::do_scheduling(<ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>instr)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>register<sp/>dependencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>src_reg<sp/>:<sp/>instr.source_registers)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::empty(reg_producers[src_reg]))<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>prior<sp/>=<sp/>reg_producers[src_reg].back();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prior.registers_instrs_depend_on_me.empty()<sp/>||<sp/>prior.registers_instrs_depend_on_me.back().get().instr_id<sp/>!=<sp/>instr.instr_id)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prior.registers_instrs_depend_on_me.push_back(instr);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instr.num_reg_dependent++;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dreg<sp/>:<sp/>instr.destination_registers)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>std::begin(reg_producers[dreg]);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::end(reg_producers[dreg]);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ins<sp/>=<sp/>std::lower_bound(begin,<sp/>end,<sp/>instr,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.instr_id<sp/>&lt;<sp/>rhs.instr_id;<sp/>});</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_producers[dreg].insert(ins,<sp/>std::ref(instr));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>instr.scheduled<sp/>=<sp/>COMPLETED;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>instr.event_cycle<sp/>=<sp/>current_cycle<sp/>+<sp/>(warmup<sp/>?<sp/>0<sp/>:<sp/>SCHEDULING_LATENCY);</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::execute_instruction()</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>exec_bw<sp/>=<sp/>EXEC_WIDTH;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rob_it<sp/>=<sp/>std::begin(ROB);<sp/>rob_it<sp/>!=<sp/>std::end(ROB)<sp/>&amp;&amp;<sp/>exec_bw<sp/>&gt;<sp/>0;<sp/>++rob_it)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rob_it-&gt;scheduled<sp/>==<sp/>COMPLETED<sp/>&amp;&amp;<sp/>rob_it-&gt;executed<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>rob_it-&gt;num_reg_dependent<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>rob_it-&gt;event_cycle<sp/>&lt;=<sp/>current_cycle)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>do_execution(*rob_it);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--exec_bw;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXEC_WIDTH<sp/>-<sp/>exec_bw;</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::do_execution(<ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>rob_entry)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>rob_entry.executed<sp/>=<sp/>INFLIGHT;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>rob_entry.event_cycle<sp/>=<sp/>current_cycle<sp/>+<sp/>(warmup<sp/>?<sp/>0<sp/>:<sp/>EXEC_LATENCY);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>LQ<sp/>entries<sp/>as<sp/>ready<sp/>to<sp/>translate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lq_entry<sp/>:<sp/>LQ)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lq_entry.has_value()<sp/>&amp;&amp;<sp/>lq_entry-&gt;instr_id<sp/>==<sp/>rob_entry.instr_id)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lq_entry-&gt;event_cycle<sp/>=<sp/>current_cycle<sp/>+<sp/>(warmup<sp/>?<sp/>0<sp/>:<sp/>EXEC_LATENCY);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>SQ<sp/>entries<sp/>as<sp/>ready<sp/>to<sp/>translate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sq_entry<sp/>:<sp/>SQ)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sq_entry.instr_id<sp/>==<sp/>rob_entry.instr_id)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sq_entry.event_cycle<sp/>=<sp/>current_cycle<sp/>+<sp/>(warmup<sp/>?<sp/>0<sp/>:<sp/>EXEC_LATENCY);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[ROB]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>event_cycle:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>rob_entry.instr_id,<sp/>rob_entry.event_cycle);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::do_memory_scheduling(<ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>instr)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>load</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>smem<sp/>:<sp/>instr.source_memory)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>q_entry<sp/>=<sp/>std::find_if_not(std::begin(LQ),<sp/>std::end(LQ),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lq_entry)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lq_entry.has_value();<sp/>});</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(q_entry<sp/>!=<sp/>std::end(LQ));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>q_entry-&gt;emplace(instr.instr_id,<sp/>smem,<sp/>instr.ip,<sp/>instr.asid);<sp/></highlight><highlight class="comment">//<sp/>add<sp/>it<sp/>to<sp/>the<sp/>load<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>forwarding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sq_it<sp/>=<sp/>std::max_element(std::begin(SQ),<sp/>std::end(SQ),<sp/>[smem](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.virtual_address<sp/>!=<sp/>smem<sp/>||<sp/>(rhs.virtual_address<sp/>==<sp/>smem<sp/>&amp;&amp;<sp/>lhs.instr_id<sp/>&lt;<sp/>rhs.instr_id);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sq_it<sp/>!=<sp/>std::end(SQ)<sp/>&amp;&amp;<sp/>sq_it-&gt;virtual_address<sp/>==<sp/>smem)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sq_it-&gt;fetch_issued)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Store<sp/>already<sp/>executed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q_entry-&gt;reset();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++instr.completed_mem_ops;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[DISPATCH]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>forwards_from:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>instr.instr_id,<sp/>sq_it-&gt;event_cycle);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sq_it-&gt;instr_id<sp/>&lt;<sp/>instr.instr_id);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>found<sp/>SQ<sp/>entry<sp/>is<sp/>a<sp/>prior<sp/>store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sq_it-&gt;lq_depend_on_me.push_back(*q_entry);<sp/></highlight><highlight class="comment">//<sp/>Forward<sp/>the<sp/>load<sp/>when<sp/>the<sp/>store<sp/>finishes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*q_entry)-&gt;producer_id<sp/>=<sp/>sq_it-&gt;instr_id;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>load<sp/>waits<sp/>on<sp/>the<sp/>store<sp/>to<sp/>finish</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[DISPATCH]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>waits<sp/>on:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>instr.instr_id,<sp/>sq_it-&gt;event_cycle);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>dmem<sp/>:<sp/>instr.destination_memory)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>SQ.emplace_back(instr.instr_id,<sp/>dmem,<sp/>instr.ip,<sp/>instr.asid);<sp/></highlight><highlight class="comment">//<sp/>add<sp/>it<sp/>to<sp/>the<sp/>store<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[DISPATCH]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>loads:<sp/>{}<sp/>stores:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>instr.instr_id,<sp/>std::size(instr.source_memory),</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size(instr.destination_memory));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::operate_lsq()</highlight></codeline>
<codeline lineno="459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>store_bw<sp/>=<sp/>SQ_WIDTH;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>complete_id<sp/>=<sp/>std::empty(ROB)<sp/>?<sp/>std::numeric_limits&lt;uint64_t&gt;::max()<sp/>:<sp/>ROB.front().instr_id;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>do_complete<sp/>=<sp/>[cycle<sp/>=<sp/>current_cycle,<sp/>complete_id,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.instr_id<sp/>&lt;<sp/>complete_id<sp/>&amp;&amp;<sp/>x.event_cycle<sp/>&lt;=<sp/>cycle<sp/>&amp;&amp;<sp/>this-&gt;do_complete_store(x);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>unfetched_begin<sp/>=<sp/>std::partition_point(std::begin(SQ),<sp/>std::end(SQ),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.fetch_issued;<sp/>});</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[fetch_begin,<sp/>fetch_end]<sp/>=<sp/>champsim::get_span_p(unfetched_begin,<sp/>std::end(SQ),<sp/>store_bw,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[cycle<sp/>=<sp/>current_cycle](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!x.fetch_issued<sp/>&amp;&amp;<sp/>x.event_cycle<sp/>&lt;=<sp/>cycle;<sp/>});</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>store_bw<sp/>-=<sp/>std::distance(fetch_begin,<sp/>fetch_end);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>std::for_each(fetch_begin,<sp/>fetch_end,<sp/>[cycle<sp/>=<sp/>current_cycle,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sq_entry)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;do_finish_store(sq_entry);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>sq_entry.fetch_issued<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>sq_entry.event_cycle<sp/>=<sp/>cycle;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[complete_begin,<sp/>complete_end]<sp/>=<sp/>champsim::get_span_p(std::cbegin(SQ),<sp/>std::cend(SQ),<sp/>store_bw,<sp/>do_complete);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>store_bw<sp/>-=<sp/>std::distance(complete_begin,<sp/>complete_end);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>SQ.erase(complete_begin,<sp/>complete_end);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>load_bw<sp/>=<sp/>LQ_WIDTH;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lq_entry<sp/>:<sp/>LQ)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(load_bw<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>lq_entry.has_value()<sp/>&amp;&amp;<sp/>lq_entry-&gt;producer_id<sp/>==<sp/>std::numeric_limits&lt;uint64_t&gt;::max()<sp/>&amp;&amp;<sp/>!lq_entry-&gt;fetch_issued</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>lq_entry-&gt;event_cycle<sp/>&lt;<sp/>current_cycle)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>execute_load(*lq_entry);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--load_bw;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lq_entry-&gt;fetch_issued<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(SQ_WIDTH<sp/>-<sp/>store_bw)<sp/>+<sp/>(LQ_WIDTH<sp/>-<sp/>load_bw);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::do_finish_store(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLSQ__ENTRY" kindref="compound">LSQ_ENTRY</ref>&amp;<sp/>sq_entry)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>sq_entry.finish(std::begin(ROB),<sp/>std::end(ROB));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Release<sp/>dependent<sp/>loads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::optional&lt;LSQ_ENTRY&gt;&amp;<sp/>dependent<sp/>:<sp/>sq_entry.lq_depend_on_me)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(dependent.has_value());<sp/></highlight><highlight class="comment">//<sp/>LQ<sp/>entry<sp/>is<sp/>still<sp/>allocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(dependent-&gt;producer_id<sp/>==<sp/>sq_entry.instr_id);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>dependent-&gt;finish(std::begin(ROB),<sp/>std::end(ROB));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>dependent.reset();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>O3_CPU::do_complete_store(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLSQ__ENTRY" kindref="compound">LSQ_ENTRY</ref>&amp;<sp/>sq_entry)</highlight></codeline>
<codeline lineno="512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>CacheBus::request_type<sp/>data_packet;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>data_packet.v_address<sp/>=<sp/>sq_entry.virtual_address;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>data_packet.instr_id<sp/>=<sp/>sq_entry.instr_id;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>data_packet.ip<sp/>=<sp/>sq_entry.ip;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[SQ]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>vaddr:<sp/>{:x}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>data_packet.instr_id,<sp/>data_packet.v_address);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L1D_bus.issue_write(data_packet);</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>O3_CPU::execute_load(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLSQ__ENTRY" kindref="compound">LSQ_ENTRY</ref>&amp;<sp/>lq_entry)</highlight></codeline>
<codeline lineno="526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>CacheBus::request_type<sp/>data_packet;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>data_packet.v_address<sp/>=<sp/>lq_entry.virtual_address;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>data_packet.instr_id<sp/>=<sp/>lq_entry.instr_id;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>data_packet.ip<sp/>=<sp/>lq_entry.ip;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[LQ]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>vaddr:<sp/>{:#x}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>data_packet.instr_id,<sp/>data_packet.v_address);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L1D_bus.issue_read(data_packet);</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::do_complete_execution(<ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>instr)</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dreg<sp/>:<sp/>instr.destination_registers)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>std::begin(reg_producers[dreg]);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::end(reg_producers[dreg]);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>elem<sp/>=<sp/>std::find_if(begin,<sp/>end,<sp/>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>instr.instr_id](<ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>x)<sp/>{<sp/>return<sp/>x.instr_id<sp/>==<sp/>id;<sp/>});</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(elem<sp/>!=<sp/>end);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_producers[dreg].erase(elem);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>instr.executed<sp/>=<sp/>COMPLETED;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>dependent<sp/>:<sp/>instr.registers_instrs_depend_on_me)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>dependent.num_reg_dependent--;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(dependent.num_reg_dependent<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dependent.num_reg_dependent<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dependent.scheduled<sp/>=<sp/>COMPLETED;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instr.branch_mispredicted)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>fetch_resume_cycle<sp/>=<sp/>current_cycle<sp/>+<sp/>BRANCH_MISPREDICT_PENALTY;</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::complete_inflight_instruction()</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>ROB<sp/>entries<sp/>with<sp/>completed<sp/>executions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>complete_bw<sp/>=<sp/>EXEC_WIDTH;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rob_it<sp/>=<sp/>std::begin(ROB);<sp/>rob_it<sp/>!=<sp/>std::end(ROB)<sp/>&amp;&amp;<sp/>complete_bw<sp/>&gt;<sp/>0;<sp/>++rob_it)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rob_it-&gt;executed<sp/>==<sp/>INFLIGHT)<sp/>&amp;&amp;<sp/>(rob_it-&gt;event_cycle<sp/>&lt;=<sp/>current_cycle)<sp/>&amp;&amp;<sp/>rob_it-&gt;completed_mem_ops<sp/>==<sp/>rob_it-&gt;num_mem_ops())<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>do_complete_execution(*rob_it);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--complete_bw;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXEC_WIDTH<sp/>-<sp/>complete_bw;</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::handle_memory_return()</highlight></codeline>
<codeline lineno="578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>progress{0};</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>l1i_bw<sp/>=<sp/>FETCH_WIDTH,<sp/>to_read<sp/>=<sp/>L1I_BANDWIDTH;<sp/>l1i_bw<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>to_read<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>!L1I_bus.lower_level-&gt;returned.empty();<sp/>--to_read)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>l1i_entry<sp/>=<sp/>L1I_bus.lower_level-&gt;returned.front();</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(l1i_bw<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>!l1i_entry.instr_depend_on_me.empty())<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>fetched<sp/>=<sp/>l1i_entry.instr_depend_on_me.front();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fetched.ip<sp/>&gt;&gt;<sp/>LOG2_BLOCK_SIZE)<sp/>==<sp/>(l1i_entry.v_address<sp/>&gt;&gt;<sp/>LOG2_BLOCK_SIZE)<sp/>&amp;&amp;<sp/>fetched.fetched<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fetched.fetched<sp/>=<sp/>COMPLETED;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--l1i_bw;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++progress;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[IFETCH]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>fetch<sp/>completed\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>fetched.instr_id);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l1i_entry.instr_depend_on_me.erase(std::begin(l1i_entry.instr_depend_on_me));</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>this<sp/>entry<sp/>if<sp/>we<sp/>have<sp/>serviced<sp/>all<sp/>of<sp/>its<sp/>instructions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l1i_entry.instr_depend_on_me.empty())<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>L1I_bus.lower_level-&gt;returned.pop_front();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++progress;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>l1d_it<sp/>=<sp/>std::begin(L1D_bus.lower_level-&gt;returned);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>l1d_bw<sp/>=<sp/>L1D_BANDWIDTH;<sp/>l1d_bw<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>l1d_it<sp/>!=<sp/>std::end(L1D_bus.lower_level-&gt;returned);<sp/>--l1d_bw,<sp/>++l1d_it)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lq_entry<sp/>:<sp/>LQ)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lq_entry.has_value()<sp/>&amp;&amp;<sp/>lq_entry-&gt;fetch_issued<sp/>&amp;&amp;<sp/>lq_entry-&gt;virtual_address<sp/>&gt;&gt;<sp/>LOG2_BLOCK_SIZE<sp/>==<sp/>l1d_it-&gt;v_address<sp/>&gt;&gt;<sp/>LOG2_BLOCK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lq_entry-&gt;finish(std::begin(ROB),<sp/>std::end(ROB));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lq_entry.reset();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++progress;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>++progress;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>L1D_bus.lower_level-&gt;returned.erase(std::begin(L1D_bus.lower_level-&gt;returned),<sp/>l1d_it);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>progress;</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>O3_CPU::retire_rob()</highlight></codeline>
<codeline lineno="623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[retire_begin,<sp/>retire_end]<sp/>=<sp/>champsim::get_span_p(std::cbegin(ROB),<sp/>std::cend(ROB),<sp/>RETIRE_WIDTH,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.executed<sp/>==<sp/>COMPLETED;<sp/>});</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(retire_begin,<sp/>retire_end,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[ROB]<sp/>retire_rob<sp/>instr_id:<sp/>{}<sp/>is<sp/>retired\n&quot;</highlight><highlight class="normal">,<sp/>x.instr_id);<sp/>});</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>retire_count<sp/>=<sp/>std::distance(retire_begin,<sp/>retire_end);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>num_retired<sp/>+=<sp/>retire_count;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>ROB.erase(retire_begin,<sp/>retire_end);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retire_count;</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_START<sp/>Exclude<sp/>the<sp/>following<sp/>function<sp/>from<sp/>LCOV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>O3_CPU::print_deadlock()</highlight></codeline>
<codeline lineno="637"><highlight class="normal">{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;DEADLOCK!<sp/>CPU<sp/>{}<sp/>cycle<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>cpu,<sp/>current_cycle);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>instr_pack<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tuple{entry.instr_id,<sp/>+entry.fetched,<sp/>+entry.scheduled,<sp/>+entry.executed,<sp/>+entry.num_reg_dependent,<sp/>entry.num_mem_ops()<sp/>-<sp/>entry.completed_mem_ops,<sp/>entry.event_cycle};</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>std::string_view<sp/>instr_fmt{</highlight><highlight class="stringliteral">&quot;instr_id:<sp/>{}<sp/>fetched:<sp/>{}<sp/>scheduled:<sp/>{}<sp/>executed:<sp/>{}<sp/>num_reg_dependent:<sp/>{}<sp/>num_mem_ops:<sp/>{}<sp/>event:<sp/>{}&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>champsim::range_print_deadlock(IFETCH_BUFFER,<sp/></highlight><highlight class="stringliteral">&quot;cpu&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(cpu)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_IFETCH&quot;</highlight><highlight class="normal">,<sp/>instr_fmt,<sp/>instr_pack);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>champsim::range_print_deadlock(DECODE_BUFFER,<sp/></highlight><highlight class="stringliteral">&quot;cpu&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(cpu)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_DECODE&quot;</highlight><highlight class="normal">,<sp/>instr_fmt,<sp/>instr_pack);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>champsim::range_print_deadlock(DISPATCH_BUFFER,<sp/></highlight><highlight class="stringliteral">&quot;cpu&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(cpu)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_DISPATCH&quot;</highlight><highlight class="normal">,<sp/>instr_fmt,<sp/>instr_pack);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>champsim::range_print_deadlock(ROB,<sp/></highlight><highlight class="stringliteral">&quot;cpu&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(cpu)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_ROB&quot;</highlight><highlight class="normal">,<sp/>instr_fmt,<sp/>instr_pack);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>LSQ<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lq_pack<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>depend_id{</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry-&gt;producer_id<sp/>!=<sp/>std::numeric_limits&lt;uint64_t&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>depend_id<sp/>=<sp/>std::to_string(entry-&gt;producer_id);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tuple{entry-&gt;instr_id,<sp/>entry-&gt;virtual_address,<sp/>entry-&gt;fetch_issued,<sp/>entry-&gt;event_cycle,<sp/>depend_id};</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>std::string_view<sp/>lq_fmt{</highlight><highlight class="stringliteral">&quot;instr_id:<sp/>{}<sp/>address:<sp/>{:#x}<sp/>fetch_issued:<sp/>{}<sp/>event_cycle:<sp/>{}<sp/>waits<sp/>on<sp/>{}&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sq_pack<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>depend_ids;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(std::begin(entry.lq_depend_on_me),<sp/>std::end(entry.lq_depend_on_me),<sp/>std::back_inserter(depend_ids),</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;LSQ_ENTRY&gt;&amp;<sp/>lq_entry)<sp/>{<sp/>return<sp/>lq_entry-&gt;producer_id;<sp/>});</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tuple{entry.instr_id,<sp/>entry.virtual_address,<sp/>entry.fetch_issued,<sp/>entry.event_cycle,<sp/>depend_ids};</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>std::string_view<sp/>sq_fmt{</highlight><highlight class="stringliteral">&quot;instr_id:<sp/>{}<sp/>address:<sp/>{:#x}<sp/>fetch_issued:<sp/>{}<sp/>event_cycle:<sp/>{}<sp/>LQ<sp/>waiting:<sp/>{}&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>champsim::range_print_deadlock(LQ,<sp/></highlight><highlight class="stringliteral">&quot;cpu&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(cpu)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_LQ&quot;</highlight><highlight class="normal">,<sp/>lq_fmt,<sp/>lq_pack);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>champsim::range_print_deadlock(SQ,<sp/></highlight><highlight class="stringliteral">&quot;cpu&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(cpu)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_SQ&quot;</highlight><highlight class="normal">,<sp/>sq_fmt,<sp/>sq_pack);</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_STOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal">LSQ_ENTRY::LSQ_ENTRY(uint64_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint64_t<sp/>addr,<sp/>uint64_t<sp/>local_ip,<sp/>std::array&lt;uint8_t,<sp/>2&gt;<sp/>local_asid)</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>instr_id(id),<sp/>virtual_address(addr),<sp/>ip(local_ip),<sp/>asid(local_asid)</highlight></codeline>
<codeline lineno="673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LSQ_ENTRY::finish(std::deque&lt;ooo_model_instr&gt;::iterator<sp/>begin,<sp/>std::deque&lt;ooo_model_instr&gt;::iterator<sp/>end)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="677"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rob_entry<sp/>=<sp/>std::partition_point(begin,<sp/>end,<sp/>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>this-&gt;instr_id](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.instr_id<sp/>&lt;<sp/>id;<sp/>});</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>assert(rob_entry<sp/>!=<sp/>end);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>assert(rob_entry-&gt;instr_id<sp/>==<sp/>this-&gt;instr_id);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>++rob_entry-&gt;completed_mem_ops;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>assert(rob_entry-&gt;completed_mem_ops<sp/>&lt;=<sp/>rob_entry-&gt;num_mem_ops());</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[LSQ]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>full_address:<sp/>{:#x}<sp/>remain_mem_ops:<sp/>{}<sp/>event_cycle:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>instr_id,<sp/>virtual_address,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rob_entry-&gt;num_mem_ops()<sp/>-<sp/>rob_entry-&gt;completed_mem_ops,<sp/>event_cycle);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CacheBus::issue_read(request_type<sp/>data_packet)</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>data_packet.address<sp/>=<sp/>data_packet.v_address;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>data_packet.is_translated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>data_packet.cpu<sp/>=<sp/>cpu;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>data_packet.type<sp/>=<sp/>access_type::LOAD;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lower_level-&gt;add_rq(data_packet);</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CacheBus::issue_write(request_type<sp/>data_packet)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>data_packet.address<sp/>=<sp/>data_packet.v_address;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>data_packet.is_translated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>data_packet.cpu<sp/>=<sp/>cpu;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>data_packet.type<sp/>=<sp/>access_type::WRITE;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>data_packet.response_requested<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lower_level-&gt;add_wq(data_packet);</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/github/workspace/src/ooo_cpu.cc"/>
  </compounddef>
</doxygen>
