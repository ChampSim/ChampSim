<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="vmem_8h" kind="file" language="C++">
    <compoundname>vmem.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">map</includes>
    <includes local="yes">champsim_constants.h</includes>
    <includedby refid="main_8cc" local="yes">main.cc</includedby>
    <includedby refid="ptw_8cc" local="yes">ptw.cc</includedby>
    <includedby refid="vmem_8cc" local="yes">vmem.cc</includedby>
    <incdepgraph>
      <node id="1">
        <label>vmem.h</label>
        <link refid="vmem_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>champsim_constants.h</label>
      </node>
      <node id="2">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
    </incdepgraph>
    <innerclass refid="classVirtualMemory" prot="public">VirtualMemory</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="vmem_8h_1a2492db386cf6b9cfdd3d7d73d8d221da" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto VMEM_RESERVE_CAPACITY</definition>
        <argsstring></argsstring>
        <name>VMEM_RESERVE_CAPACITY</name>
        <initializer>= std::max&lt;uint64_t&gt;(PAGE_SIZE, 1ull &lt;&lt; 20)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/inc/vmem.h" line="28" column="23" bodyfile="/github/workspace/inc/vmem.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="vmem_8h_1a1ca9816f7f569607e332299fda528a78" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t PTE_BYTES</definition>
        <argsstring></argsstring>
        <name>PTE_BYTES</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/inc/vmem.h" line="30" column="30" bodyfile="/github/workspace/inc/vmem.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Copyright<sp/>2023<sp/>The<sp/>ChampSim<sp/>Contributors</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VMEM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VMEM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;champsim_constants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classMEMORY__CONTROLLER" kindref="compound">MEMORY_CONTROLLER</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reserve<sp/>1MB<sp/>or<sp/>one<sp/>page<sp/>of<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>VMEM_RESERVE_CAPACITY<sp/>=<sp/>std::max&lt;uint64_t&gt;(PAGE_SIZE,<sp/>1ull<sp/>&lt;&lt;<sp/>20);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::size_t<sp/>PTE_BYTES<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classVirtualMemory" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classVirtualMemory" kindref="compound">VirtualMemory</ref></highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>std::map&lt;std::pair&lt;uint32_t,<sp/>uint64_t&gt;,<sp/>uint64_t&gt;<sp/>vpage_to_ppage_map;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::map&lt;std::tuple&lt;uint32_t,<sp/>uint64_t,<sp/>uint32_t&gt;,<sp/>uint64_t&gt;<sp/>page_table;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>uint64_t<sp/>next_pte_page<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>uint64_t<sp/>next_ppage;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>uint64_t<sp/>last_ppage;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>uint64_t<sp/>ppage_front()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ppage_pop();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>minor_fault_penalty;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>pt_levels;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>pte_page_size;<sp/></highlight><highlight class="comment">//<sp/>Size<sp/>of<sp/>a<sp/>PTE<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>capacity<sp/>and<sp/>pg_size<sp/>are<sp/>measured<sp/>in<sp/>bytes,<sp/>and<sp/>capacity<sp/>must<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>pg_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="classVirtualMemory" kindref="compound">VirtualMemory</ref>(uint64_t<sp/>pg_size,<sp/>std::size_t<sp/>page_table_levels,<sp/>uint64_t<sp/>minor_penalty,<sp/><ref refid="classMEMORY__CONTROLLER" kindref="compound">MEMORY_CONTROLLER</ref>&amp;<sp/>dram);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>uint64_t<sp/>shamt(std::size_t<sp/>level)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>uint64_t<sp/>get_offset(uint64_t<sp/>vaddr,<sp/>std::size_t<sp/>level)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>std::size_t<sp/>available_ppages()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>std::pair&lt;uint64_t,<sp/>uint64_t&gt;<sp/>va_to_pa(uint32_t<sp/>cpu_num,<sp/>uint64_t<sp/>vaddr);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>std::pair&lt;uint64_t,<sp/>uint64_t&gt;<sp/>get_pte_pa(uint32_t<sp/>cpu_num,<sp/>uint64_t<sp/>vaddr,<sp/>std::size_t<sp/>level);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/github/workspace/inc/vmem.h"/>
  </compounddef>
</doxygen>
