<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="champsim_8cc" kind="file" language="C++">
    <compoundname>champsim.cc</compoundname>
    <includes refid="champsim_8h" local="yes">champsim.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">chrono</includes>
    <includes local="no">numeric</includes>
    <includes local="no">vector</includes>
    <includes refid="environment_8h" local="yes">environment.h</includes>
    <includes refid="ooo__cpu_8h" local="yes">ooo_cpu.h</includes>
    <includes refid="operable_8h" local="yes">operable.h</includes>
    <includes refid="phase__info_8h" local="yes">phase_info.h</includes>
    <includes refid="tracereader_8h" local="yes">tracereader.h</includes>
    <includes local="no">fmt/chrono.h</includes>
    <includes local="no">fmt/core.h</includes>
    <incdepgraph>
      <node id="11">
        <label>cache.h</label>
        <link refid="cache_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>champsim.h</label>
        <link refid="champsim_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>channel.h</label>
        <link refid="channel_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>dram_controller.h</label>
        <link refid="dram__controller_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>environment.h</label>
        <link refid="environment_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>instruction.h</label>
        <link refid="instruction_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>module_impl.h</label>
        <link refid="module__impl_8h_source"/>
      </node>
      <node id="30">
        <label>ooo_cpu.h</label>
        <link refid="ooo__cpu_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>operable.h</label>
        <link refid="operable_8h_source"/>
      </node>
      <node id="38">
        <label>phase_info.h</label>
        <link refid="phase__info_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>ptw.h</label>
        <link refid="ptw_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>trace_instruction.h</label>
        <link refid="trace__instruction_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>tracereader.h</label>
        <link refid="tracereader_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>champsim.cc</label>
        <link refid="champsim_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>array</label>
      </node>
      <node id="13">
        <label>bitset</label>
      </node>
      <node id="25">
        <label>cache_module_decl.inc</label>
      </node>
      <node id="26">
        <label>cache_module_def.inc</label>
      </node>
      <node id="18">
        <label>champsim_constants.h</label>
      </node>
      <node id="6">
        <label>chrono</label>
      </node>
      <node id="28">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="40">
        <label>cstring</label>
      </node>
      <node id="14">
        <label>deque</label>
      </node>
      <node id="4">
        <label>exception</label>
      </node>
      <node id="42">
        <label>fmt/chrono.h</label>
      </node>
      <node id="43">
        <label>fmt/core.h</label>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="20">
        <label>limits</label>
      </node>
      <node id="15">
        <label>memory</label>
      </node>
      <node id="7">
        <label>numeric</label>
      </node>
      <node id="35">
        <label>ooo_cpu_module_decl.inc</label>
      </node>
      <node id="36">
        <label>ooo_cpu_module_def.inc</label>
      </node>
      <node id="29">
        <label>optional</label>
      </node>
      <node id="31">
        <label>queue</label>
      </node>
      <node id="16">
        <label>stdexcept</label>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="21">
        <label>string_view</label>
      </node>
      <node id="24">
        <label>type_traits</label>
      </node>
      <node id="41">
        <label>util/detect.h</label>
      </node>
      <node id="34">
        <label>util/lru_table.h</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacechampsim">champsim</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="champsim_8cc_1a29a3d09d1cc64beca9899a4d64a11438" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int DEADLOCK_CYCLE</definition>
        <argsstring></argsstring>
        <name>DEADLOCK_CYCLE</name>
        <initializer>{500}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/champsim.cc" line="32" column="15" bodyfile="/github/workspace/src/champsim.cc" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="champsim_8cc_1ae79d771c5e4a335205a8e6ba68677e2f" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto start_time</definition>
        <argsstring></argsstring>
        <name>start_time</name>
        <initializer>= std::chrono::steady_clock::now()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/champsim.cc" line="34" column="6" bodyfile="/github/workspace/src/champsim.cc" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="champsim_8cc_1ab06bf0fc55a22019b65e09d1dd724505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::chrono::seconds</type>
        <definition>std::chrono::seconds elapsed_time</definition>
        <argsstring>()</argsstring>
        <name>elapsed_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/champsim.cc" line="36" column="22" bodyfile="/github/workspace/src/champsim.cc" bodystart="36" bodyend="36"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Copyright<sp/>2023<sp/>The<sp/>ChampSim<sp/>Contributors</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;champsim.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;environment.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ooo_cpu.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;operable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;phase_info.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tracereader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/chrono.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DEADLOCK_CYCLE{500};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_time<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">std::chrono::seconds<sp/>elapsed_time()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration_cast&lt;std::chrono::seconds&gt;(std::chrono::steady_clock::now()<sp/>-<sp/>start_time);<sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">champsim</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal">phase_stats<sp/>do_phase(phase_info<sp/>phase,<sp/>environment&amp;<sp/>env,<sp/>std::vector&lt;tracereader&gt;&amp;<sp/>traces)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[phase_name,<sp/>is_warmup,<sp/>length,<sp/>trace_index,<sp/>trace_names]<sp/>=<sp/>phase;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operables<sp/>=<sp/>env.operable_view();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classchampsim_1_1operable" kindref="compound">champsim::operable</ref>&amp;<sp/>op<sp/>:<sp/>operables)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>op.warmup<sp/>=<sp/>is_warmup;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>op.begin_phase();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stalled_cycle{0};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>phase_complete(std::size(env.cpu_view()),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!std::accumulate(std::begin(phase_complete),<sp/>std::end(phase_complete),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>std::logical_and{}))<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next_phase_complete<sp/>=<sp/>phase_complete;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Operate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>progress{0};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classchampsim_1_1operable" kindref="compound">champsim::operable</ref>&amp;<sp/>op<sp/>:<sp/>operables)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>progress<sp/>+=<sp/>op._operate();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(progress<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++stalled_cycle;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stalled_cycle<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stalled_cycle<sp/>&gt;=<sp/>DEADLOCK_CYCLE)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::for_each(std::begin(operables),<sp/>std::end(operables),<sp/>[](<ref refid="classchampsim_1_1operable" kindref="compound">champsim::operable</ref>&amp;<sp/>c)<sp/>{<sp/>c.print_deadlock();<sp/>});</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(std::begin(operables),<sp/>std::end(operables),</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classchampsim_1_1operable" kindref="compound">champsim::operable</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classchampsim_1_1operable" kindref="compound">champsim::operable</ref>&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.leap_operation<sp/>&lt;<sp/>rhs.leap_operation;<sp/>});</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>from<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classO3__CPU" kindref="compound">O3_CPU</ref>&amp;<sp/>cpu<sp/>:<sp/>env.cpu_view())<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>trace<sp/>=<sp/>traces.at(trace_index.at(cpu.cpu));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pkt_count<sp/>=<sp/>cpu.IN_QUEUE_SIZE<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::size(cpu.input_queue));<sp/>!trace.eof()<sp/>&amp;&amp;<sp/>pkt_count<sp/>&gt;<sp/>0;<sp/>--pkt_count)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu.input_queue.push_back(trace());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>any<sp/>trace<sp/>reaches<sp/>EOF,<sp/>terminate<sp/>all<sp/>phases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trace.eof())</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(std::begin(next_phase_complete),<sp/>std::end(next_phase_complete),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>phase<sp/>finish</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classO3__CPU" kindref="compound">O3_CPU</ref>&amp;<sp/>cpu<sp/>:<sp/>env.cpu_view())<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_phase_complete[cpu.cpu]<sp/>=<sp/>next_phase_complete[cpu.cpu]<sp/>||<sp/>(cpu.sim_instr()<sp/>&gt;=<sp/>length);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classO3__CPU" kindref="compound">O3_CPU</ref>&amp;<sp/>cpu<sp/>:<sp/>env.cpu_view())<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_phase_complete[cpu.cpu]<sp/>!=<sp/>phase_complete[cpu.cpu])<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classchampsim_1_1operable" kindref="compound">champsim::operable</ref>&amp;<sp/>op<sp/>:<sp/>operables)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op.end_phase(cpu.cpu);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;{}<sp/>finished<sp/>CPU<sp/>{}<sp/>instructions:<sp/>{}<sp/>cycles:<sp/>{}<sp/>cumulative<sp/>IPC:<sp/>{:.4g}<sp/>(Simulation<sp/>time:<sp/>{:%H<sp/>hr<sp/>%M<sp/>min<sp/>%S<sp/>sec})\n&quot;</highlight><highlight class="normal">,<sp/>phase_name,<sp/>cpu.cpu,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu.sim_instr(),<sp/>cpu.sim_cycle(),<sp/>std::ceil(cpu.sim_instr())<sp/>/<sp/>std::ceil(cpu.sim_cycle()),<sp/>elapsed_time());</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>phase_complete<sp/>=<sp/>next_phase_complete;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classO3__CPU" kindref="compound">O3_CPU</ref>&amp;<sp/>cpu<sp/>:<sp/>env.cpu_view())<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;{}<sp/>complete<sp/>CPU<sp/>{}<sp/>instructions:<sp/>{}<sp/>cycles:<sp/>{}<sp/>cumulative<sp/>IPC:<sp/>{:.4g}<sp/>(Simulation<sp/>time:<sp/>{:%H<sp/>hr<sp/>%M<sp/>min<sp/>%S<sp/>sec})\n&quot;</highlight><highlight class="normal">,<sp/>phase_name,<sp/>cpu.cpu,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu.sim_instr(),<sp/>cpu.sim_cycle(),<sp/>std::ceil(cpu.sim_instr())<sp/>/<sp/>std::ceil(cpu.sim_cycle()),<sp/>elapsed_time());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>phase_stats<sp/>stats;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>stats.name<sp/>=<sp/>phase.name;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>std::size(trace_index);<sp/>++i)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.trace_names.push_back(trace_names.at(trace_index.at(i)));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cpus<sp/>=<sp/>env.cpu_view();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>std::transform(std::begin(cpus),<sp/>std::end(cpus),<sp/>std::back_inserter(stats.sim_cpu_stats),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classO3__CPU" kindref="compound">O3_CPU</ref>&amp;<sp/>cpu)<sp/>{<sp/>return<sp/>cpu.sim_stats;<sp/>});</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>std::transform(std::begin(cpus),<sp/>std::end(cpus),<sp/>std::back_inserter(stats.roi_cpu_stats),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classO3__CPU" kindref="compound">O3_CPU</ref>&amp;<sp/>cpu)<sp/>{<sp/>return<sp/>cpu.roi_stats;<sp/>});</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>caches<sp/>=<sp/>env.cache_view();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>std::transform(std::begin(caches),<sp/>std::end(caches),<sp/>std::back_inserter(stats.sim_cache_stats),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classCACHE" kindref="compound">CACHE</ref>&amp;<sp/>cache)<sp/>{<sp/>return<sp/>cache.sim_stats;<sp/>});</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>std::transform(std::begin(caches),<sp/>std::end(caches),<sp/>std::back_inserter(stats.roi_cache_stats),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classCACHE" kindref="compound">CACHE</ref>&amp;<sp/>cache)<sp/>{<sp/>return<sp/>cache.roi_stats;<sp/>});</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dram<sp/>=<sp/>env.dram_view();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>std::transform(std::begin(dram.channels),<sp/>std::end(dram.channels),<sp/>std::back_inserter(stats.sim_dram_stats),</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDRAM__CHANNEL" kindref="compound">DRAM_CHANNEL</ref>&amp;<sp/>chan)<sp/>{<sp/>return<sp/>chan.sim_stats;<sp/>});</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::transform(std::begin(dram.channels),<sp/>std::end(dram.channels),<sp/>std::back_inserter(stats.roi_dram_stats),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDRAM__CHANNEL" kindref="compound">DRAM_CHANNEL</ref>&amp;<sp/>chan)<sp/>{<sp/>return<sp/>chan.roi_stats;<sp/>});</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stats;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>simulation<sp/>entry<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">std::vector&lt;phase_stats&gt;<sp/>main(environment&amp;<sp/>env,<sp/>std::vector&lt;phase_info&gt;&amp;<sp/>phases,<sp/>std::vector&lt;tracereader&gt;&amp;<sp/>traces)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classchampsim_1_1operable" kindref="compound">champsim::operable</ref>&amp;<sp/>op<sp/>:<sp/>env.operable_view())</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>op.initialize();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>std::vector&lt;phase_stats&gt;<sp/>results;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>phase<sp/>:<sp/>phases)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stats<sp/>=<sp/>do_phase(phase,<sp/>env,<sp/>traces);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!phase.is_warmup)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>results.push_back(stats);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>champsim</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/github/workspace/src/champsim.cc"/>
  </compounddef>
</doxygen>
