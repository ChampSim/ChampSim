<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="json__printer_8cc" kind="file" language="C++">
    <compoundname>json_printer.cc</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">utility</includes>
    <includes refid="stats__printer_8h" local="yes">stats_printer.h</includes>
    <includes local="no">nlohmann/json.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>cache.h</label>
        <link refid="cache_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>champsim.h</label>
        <link refid="champsim_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>channel.h</label>
        <link refid="channel_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>dram_controller.h</label>
        <link refid="dram__controller_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>instruction.h</label>
        <link refid="instruction_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>module_impl.h</label>
        <link refid="module__impl_8h_source"/>
      </node>
      <node id="30">
        <label>ooo_cpu.h</label>
        <link refid="ooo__cpu_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>operable.h</label>
        <link refid="operable_8h_source"/>
      </node>
      <node id="37">
        <label>phase_info.h</label>
        <link refid="phase__info_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stats_printer.h</label>
        <link refid="stats__printer_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>trace_instruction.h</label>
        <link refid="trace__instruction_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>json_printer.cc</label>
        <link refid="json__printer_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="8">
        <label>array</label>
      </node>
      <node id="9">
        <label>bitset</label>
      </node>
      <node id="25">
        <label>cache_module_decl.inc</label>
      </node>
      <node id="26">
        <label>cache_module_def.inc</label>
      </node>
      <node id="17">
        <label>champsim_constants.h</label>
      </node>
      <node id="28">
        <label>cmath</label>
      </node>
      <node id="15">
        <label>cstdint</label>
      </node>
      <node id="10">
        <label>deque</label>
      </node>
      <node id="16">
        <label>exception</label>
      </node>
      <node id="19">
        <label>functional</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="20">
        <label>limits</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="38">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="35">
        <label>ooo_cpu_module_decl.inc</label>
      </node>
      <node id="36">
        <label>ooo_cpu_module_def.inc</label>
      </node>
      <node id="29">
        <label>optional</label>
      </node>
      <node id="31">
        <label>queue</label>
      </node>
      <node id="12">
        <label>stdexcept</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="21">
        <label>string_view</label>
      </node>
      <node id="24">
        <label>type_traits</label>
      </node>
      <node id="34">
        <label>util/lru_table.h</label>
      </node>
      <node id="3">
        <label>utility</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacechampsim">champsim</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="json__printer_8cc_1ab463c8c1fe2101d5aa59e968e038b6ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void to_json</definition>
        <argsstring>(nlohmann::json &amp;j, const O3_CPU::stats_type stats)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const <ref refid="structcpu__stats" kindref="compound">O3_CPU::stats_type</ref></type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/json_printer.cc" line="23" column="6" bodyfile="/github/workspace/src/json_printer.cc" bodystart="23" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="json__printer_8cc_1ace23cb59f954309d13ee3b60a496f2ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void to_json</definition>
        <argsstring>(nlohmann::json &amp;j, const CACHE::stats_type stats)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const <ref refid="structcache__stats" kindref="compound">CACHE::stats_type</ref></type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/json_printer.cc" line="43" column="6" bodyfile="/github/workspace/src/json_printer.cc" bodystart="43" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="json__printer_8cc_1a1497650df551d33e2930eaa57bbda68d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void to_json</definition>
        <argsstring>(nlohmann::json &amp;j, const DRAM_CHANNEL::stats_type stats)</argsstring>
        <name>to_json</name>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const <ref refid="structdram__stats" kindref="compound">DRAM_CHANNEL::stats_type</ref></type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/json_printer.cc" line="63" column="6" bodyfile="/github/workspace/src/json_printer.cc" bodystart="63" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Copyright<sp/>2023<sp/>The<sp/>ChampSim<sp/>Contributors</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stats_printer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nlohmann/json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>to_json(nlohmann::json&amp;<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcpu__stats" kindref="compound">O3_CPU::stats_type</ref><sp/>stats)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>std::array&lt;std::pair&lt;std::string,<sp/>std::size_t&gt;,<sp/>6&gt;<sp/>types{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{std::pair{</highlight><highlight class="stringliteral">&quot;BRANCH_DIRECT_JUMP&quot;</highlight><highlight class="normal">,<sp/>BRANCH_DIRECT_JUMP},<sp/>std::pair{</highlight><highlight class="stringliteral">&quot;BRANCH_INDIRECT&quot;</highlight><highlight class="normal">,<sp/>BRANCH_INDIRECT},<sp/>std::pair{</highlight><highlight class="stringliteral">&quot;BRANCH_CONDITIONAL&quot;</highlight><highlight class="normal">,<sp/>BRANCH_CONDITIONAL},</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair{</highlight><highlight class="stringliteral">&quot;BRANCH_DIRECT_CALL&quot;</highlight><highlight class="normal">,<sp/>BRANCH_DIRECT_CALL},<sp/>std::pair{</highlight><highlight class="stringliteral">&quot;BRANCH_INDIRECT_CALL&quot;</highlight><highlight class="normal">,<sp/>BRANCH_INDIRECT_CALL},</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair{</highlight><highlight class="stringliteral">&quot;BRANCH_RETURN&quot;</highlight><highlight class="normal">,<sp/>BRANCH_RETURN}}};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>total_mispredictions<sp/>=<sp/>std::ceil(</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::accumulate(std::begin(types),<sp/>std::end(types),<sp/>0ll,<sp/>[btm<sp/>=<sp/>stats.branch_type_misses](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>acc,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next)<sp/>{<sp/>return<sp/>acc<sp/>+<sp/>btm[next.second];<sp/>}));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>std::size_t&gt;<sp/>mpki{};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[name,<sp/>idx]<sp/>:<sp/>types)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>mpki.emplace(name,<sp/>stats.branch_type_misses[idx]);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>j<sp/>=<sp/>nlohmann::json{{</highlight><highlight class="stringliteral">&quot;instructions&quot;</highlight><highlight class="normal">,<sp/>stats.instrs()},</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;cycles&quot;</highlight><highlight class="normal">,<sp/>stats.cycles()},</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Avg<sp/>ROB<sp/>occupancy<sp/>at<sp/>mispredict&quot;</highlight><highlight class="normal">,<sp/>std::ceil(stats.total_rob_occupancy_at_branch_mispredict)<sp/>/<sp/>std::ceil(total_mispredictions)},</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;mispredict&quot;</highlight><highlight class="normal">,<sp/>mpki}};</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>to_json(nlohmann::json&amp;<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcache__stats" kindref="compound">CACHE::stats_type</ref><sp/>stats)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::array&lt;std::pair&lt;std::string_view,<sp/>std::size_t&gt;,<sp/>5&gt;<sp/>types{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{std::pair{</highlight><highlight class="stringliteral">&quot;LOAD&quot;</highlight><highlight class="normal">,<sp/>champsim::to_underlying(access_type::LOAD)},<sp/>std::pair{</highlight><highlight class="stringliteral">&quot;RFO&quot;</highlight><highlight class="normal">,<sp/>champsim::to_underlying(access_type::RFO)},</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair{</highlight><highlight class="stringliteral">&quot;PREFETCH&quot;</highlight><highlight class="normal">,<sp/>champsim::to_underlying(access_type::PREFETCH)},<sp/>std::pair{</highlight><highlight class="stringliteral">&quot;WRITE&quot;</highlight><highlight class="normal">,<sp/>champsim::to_underlying(access_type::WRITE)},</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair{</highlight><highlight class="stringliteral">&quot;TRANSLATION&quot;</highlight><highlight class="normal">,<sp/>champsim::to_underlying(access_type::TRANSLATION)}}};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>nlohmann::json&gt;<sp/>statsmap;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>statsmap.emplace(</highlight><highlight class="stringliteral">&quot;prefetch<sp/>requested&quot;</highlight><highlight class="normal">,<sp/>stats.pf_requested);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>statsmap.emplace(</highlight><highlight class="stringliteral">&quot;prefetch<sp/>issued&quot;</highlight><highlight class="normal">,<sp/>stats.pf_issued);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>statsmap.emplace(</highlight><highlight class="stringliteral">&quot;useful<sp/>prefetch&quot;</highlight><highlight class="normal">,<sp/>stats.pf_useful);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>statsmap.emplace(</highlight><highlight class="stringliteral">&quot;useless<sp/>prefetch&quot;</highlight><highlight class="normal">,<sp/>stats.pf_useless);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>statsmap.emplace(</highlight><highlight class="stringliteral">&quot;miss<sp/>latency&quot;</highlight><highlight class="normal">,<sp/>stats.avg_miss_latency);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>type<sp/>:<sp/>types)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>statsmap.emplace(type.first,<sp/>nlohmann::json{{</highlight><highlight class="stringliteral">&quot;hit&quot;</highlight><highlight class="normal">,<sp/>stats.hits[type.second]},<sp/>{</highlight><highlight class="stringliteral">&quot;miss&quot;</highlight><highlight class="normal">,<sp/>stats.misses[type.second]}});</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>j<sp/>=<sp/>statsmap;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>to_json(nlohmann::json&amp;<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdram__stats" kindref="compound">DRAM_CHANNEL::stats_type</ref><sp/>stats)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>j<sp/>=<sp/>nlohmann::json{{</highlight><highlight class="stringliteral">&quot;RQ<sp/>ROW_BUFFER_HIT&quot;</highlight><highlight class="normal">,<sp/>stats.RQ_ROW_BUFFER_HIT},</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;RQ<sp/>ROW_BUFFER_MISS&quot;</highlight><highlight class="normal">,<sp/>stats.RQ_ROW_BUFFER_MISS},</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;WQ<sp/>ROW_BUFFER_HIT&quot;</highlight><highlight class="normal">,<sp/>stats.WQ_ROW_BUFFER_HIT},</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;WQ<sp/>ROW_BUFFER_MISS&quot;</highlight><highlight class="normal">,<sp/>stats.WQ_ROW_BUFFER_MISS},</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;AVG<sp/>DBUS<sp/>CONGESTED<sp/>CYCLE&quot;</highlight><highlight class="normal">,<sp/>std::ceil(stats.dbus_cycle_congested)<sp/>/<sp/>std::ceil(stats.dbus_count_congested)}};</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">champsim</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>to_json(nlohmann::json&amp;<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structchampsim_1_1phase__stats" kindref="compound">champsim::phase_stats</ref><sp/>stats)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>nlohmann::json&gt;<sp/>roi_stats;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>roi_stats.emplace(</highlight><highlight class="stringliteral">&quot;cores&quot;</highlight><highlight class="normal">,<sp/>stats.roi_cpu_stats);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>roi_stats.emplace(</highlight><highlight class="stringliteral">&quot;DRAM&quot;</highlight><highlight class="normal">,<sp/>stats.roi_dram_stats);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>stats.roi_cache_stats)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>roi_stats.emplace(x.name,<sp/>x);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>nlohmann::json&gt;<sp/>sim_stats;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>sim_stats.emplace(</highlight><highlight class="stringliteral">&quot;cores&quot;</highlight><highlight class="normal">,<sp/>stats.sim_cpu_stats);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>sim_stats.emplace(</highlight><highlight class="stringliteral">&quot;DRAM&quot;</highlight><highlight class="normal">,<sp/>stats.sim_dram_stats);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>stats.sim_cache_stats)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>sim_stats.emplace(x.name,<sp/>x);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>nlohmann::json&gt;<sp/>statsmap{{</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>stats.name},<sp/>{</highlight><highlight class="stringliteral">&quot;traces&quot;</highlight><highlight class="normal">,<sp/>stats.trace_names}};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>statsmap.emplace(</highlight><highlight class="stringliteral">&quot;roi&quot;</highlight><highlight class="normal">,<sp/>roi_stats);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>statsmap.emplace(</highlight><highlight class="stringliteral">&quot;sim&quot;</highlight><highlight class="normal">,<sp/>sim_stats);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>j<sp/>=<sp/>statsmap;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>champsim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>champsim::json_printer::print(std::vector&lt;phase_stats&gt;&amp;<sp/>stats)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/>nlohmann::json::array_t{std::begin(stats),<sp/>std::end(stats)};<sp/>}</highlight></codeline>
    </programlisting>
    <location file="/github/workspace/src/json_printer.cc"/>
  </compounddef>
</doxygen>
