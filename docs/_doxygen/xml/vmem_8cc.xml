<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="vmem_8cc" kind="file" language="C++">
    <compoundname>vmem.cc</compoundname>
    <includes refid="vmem_8h" local="yes">vmem.h</includes>
    <includes local="no">cassert</includes>
    <includes refid="champsim_8h" local="yes">champsim.h</includes>
    <includes local="yes">champsim_constants.h</includes>
    <includes refid="dram__controller_8h" local="yes">dram_controller.h</includes>
    <includes local="no">fmt/core.h</includes>
    <incdepgraph>
      <node id="7">
        <label>champsim.h</label>
        <link refid="champsim_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>channel.h</label>
        <link refid="channel_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>dram_controller.h</label>
        <link refid="dram__controller_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>operable.h</label>
        <link refid="operable_8h_source"/>
      </node>
      <node id="2">
        <label>vmem.h</label>
        <link refid="vmem_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>vmem.cc</label>
        <link refid="vmem_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>array</label>
      </node>
      <node id="6">
        <label>cassert</label>
      </node>
      <node id="5">
        <label>champsim_constants.h</label>
      </node>
      <node id="11">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="16">
        <label>deque</label>
      </node>
      <node id="8">
        <label>exception</label>
      </node>
      <node id="21">
        <label>fmt/core.h</label>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="12">
        <label>limits</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="13">
        <label>optional</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="19">
        <label>string_view</label>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Copyright<sp/>2023<sp/>The<sp/>ChampSim<sp/>Contributors</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vmem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;champsim.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;champsim_constants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dram_controller.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">VirtualMemory::VirtualMemory(uint64_t<sp/>page_table_page_size,<sp/>std::size_t<sp/>page_table_levels,<sp/>uint64_t<sp/>minor_penalty,<sp/><ref refid="classMEMORY__CONTROLLER" kindref="compound">MEMORY_CONTROLLER</ref>&amp;<sp/>dram)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>next_ppage(VMEM_RESERVE_CAPACITY),<sp/>last_ppage(1ull<sp/>&lt;&lt;<sp/>(LOG2_PAGE_SIZE<sp/>+<sp/>champsim::lg2(page_table_page_size<sp/>/<sp/>PTE_BYTES)<sp/>*<sp/>page_table_levels)),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minor_fault_penalty(minor_penalty),<sp/>pt_levels(page_table_levels),<sp/>pte_page_size(page_table_page_size)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>assert(page_table_page_size<sp/>&gt;<sp/>1024);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>assert(page_table_page_size<sp/>==<sp/>(1ull<sp/>&lt;&lt;<sp/>champsim::lg2(page_table_page_size)));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>assert(last_ppage<sp/>&gt;<sp/>VMEM_RESERVE_CAPACITY);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>required_bits<sp/>=<sp/>champsim::lg2(last_ppage);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(required_bits<sp/>&gt;<sp/>64)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>virtual<sp/>memory<sp/>configuration<sp/>would<sp/>require<sp/>{}<sp/>bits<sp/>of<sp/>addressing.\n&quot;</highlight><highlight class="normal">,<sp/>required_bits);<sp/></highlight><highlight class="comment">//<sp/>LCOV_EXCL_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(required_bits<sp/>&gt;<sp/>champsim::lg2(dram.size()))</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>physical<sp/>memory<sp/>size<sp/>is<sp/>smaller<sp/>than<sp/>virtual<sp/>memory<sp/>size.\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>LCOV_EXCL_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">uint64_t<sp/>VirtualMemory::shamt(std::size_t<sp/>level)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LOG2_PAGE_SIZE<sp/>+<sp/>champsim::lg2(pte_page_size<sp/>/<sp/>PTE_BYTES)<sp/>*<sp/>(level<sp/>-<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">uint64_t<sp/>VirtualMemory::get_offset(uint64_t<sp/>vaddr,<sp/>std::size_t<sp/>level)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="44"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vaddr<sp/>&gt;&gt;<sp/>shamt(level))<sp/>&amp;<sp/>champsim::bitmask(champsim::lg2(pte_page_size<sp/>/<sp/>PTE_BYTES));</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">uint64_t<sp/>VirtualMemory::ppage_front()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="49"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>assert(available_ppages()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_ppage;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VirtualMemory::ppage_pop()<sp/>{<sp/>next_ppage<sp/>+=<sp/>PAGE_SIZE;<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">std::size_t<sp/>VirtualMemory::available_ppages()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(last_ppage<sp/>-<sp/>next_ppage)<sp/>/<sp/>PAGE_SIZE;<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">std::pair&lt;uint64_t,<sp/>uint64_t&gt;<sp/>VirtualMemory::va_to_pa(uint32_t<sp/>cpu_num,<sp/>uint64_t<sp/>vaddr)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[ppage,<sp/>fault]<sp/>=<sp/>vpage_to_ppage_map.insert({{cpu_num,<sp/>vaddr<sp/>&gt;&gt;<sp/>LOG2_PAGE_SIZE},<sp/>ppage_front()});</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>vpage<sp/>doesn&apos;t<sp/>yet<sp/>have<sp/>a<sp/>ppage<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fault)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>ppage_pop();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>paddr<sp/>=<sp/>champsim::splice_bits(ppage-&gt;second,<sp/>vaddr,<sp/>LOG2_PAGE_SIZE);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[VMEM]<sp/>{}<sp/>paddr:<sp/>{:x}<sp/>vaddr:<sp/>{:x}<sp/>fault:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>paddr,<sp/>vaddr,<sp/>fault);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{paddr,<sp/>fault<sp/>?<sp/>minor_fault_penalty<sp/>:<sp/>0};</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">std::pair&lt;uint64_t,<sp/>uint64_t&gt;<sp/>VirtualMemory::get_pte_pa(uint32_t<sp/>cpu_num,<sp/>uint64_t<sp/>vaddr,<sp/>std::size_t<sp/>level)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_pte_page<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>next_pte_page<sp/>=<sp/>ppage_front();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>ppage_pop();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>std::tuple<sp/>key{cpu_num,<sp/>vaddr<sp/>&gt;&gt;<sp/>shamt(level),<sp/>level};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[ppage,<sp/>fault]<sp/>=<sp/>page_table.insert({key,<sp/>next_pte_page});</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>PTE<sp/>doesn&apos;t<sp/>yet<sp/>have<sp/>a<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fault)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>next_pte_page<sp/>+=<sp/>pte_page_size;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(next_pte_page<sp/>%<sp/>PAGE_SIZE))<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_pte_page<sp/>=<sp/>ppage_front();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ppage_pop();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>get_offset(vaddr,<sp/>level);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>paddr<sp/>=<sp/>champsim::splice_bits(ppage-&gt;second,<sp/>offset<sp/>*<sp/>PTE_BYTES,<sp/>champsim::lg2(pte_page_size));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[VMEM]<sp/>{}<sp/>paddr:<sp/>{:x}<sp/>vaddr:<sp/>{:x}<sp/>pt_page_offset:<sp/>{}<sp/>translation_level:<sp/>{}<sp/>fault:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>paddr,<sp/>vaddr,<sp/>offset,<sp/>level,<sp/>fault);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{paddr,<sp/>fault<sp/>?<sp/>minor_fault_penalty<sp/>:<sp/>0};</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/github/workspace/src/vmem.cc"/>
  </compounddef>
</doxygen>
