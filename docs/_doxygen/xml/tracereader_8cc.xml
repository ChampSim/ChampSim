<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="tracereader_8cc" kind="file" language="C++">
    <compoundname>tracereader.cc</compoundname>
    <includes refid="tracereader_8h" local="yes">tracereader.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">string</includes>
    <includes refid="inf__stream_8h" local="yes">inf_stream.h</includes>
    <includes refid="repeatable_8h" local="yes">repeatable.h</includes>
    <incdepgraph>
      <node id="18">
        <label>inf_stream.h</label>
        <link refid="inf__stream_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>instruction.h</label>
        <link refid="instruction_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>repeatable.h</label>
        <link refid="repeatable_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>trace_instruction.h</label>
        <link refid="trace__instruction_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tracereader.h</label>
        <link refid="tracereader_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tracereader.cc</label>
        <link refid="tracereader_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>array</label>
      </node>
      <node id="19">
        <label>bzlib.h</label>
      </node>
      <node id="20">
        <label>cassert</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>cstring</label>
      </node>
      <node id="4">
        <label>deque</label>
      </node>
      <node id="25">
        <label>fmt/ranges.h</label>
      </node>
      <node id="17">
        <label>fstream</label>
      </node>
      <node id="12">
        <label>functional</label>
      </node>
      <node id="21">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>limits</label>
      </node>
      <node id="22">
        <label>lzma.h</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="6">
        <label>numeric</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="16">
        <label>util/detect.h</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="23">
        <label>zlib.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacechampsim">champsim</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="tracereader_8cc_1a804c9541dc511636f2ea46eb5f065bcc" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type><ref refid="structchampsim_1_1repeatable" kindref="compound">champsim::repeatable</ref>&lt; <ref refid="classchampsim_1_1bulk__tracereader" kindref="compound">champsim::bulk_tracereader</ref>&lt; T, S &gt;, uint8_t, std::string &gt;</type>
        <definition>using repeatable_reader_t =  champsim::repeatable&lt;champsim::bulk_tracereader&lt;T, S&gt;, uint8_t, std::string&gt;</definition>
        <argsstring></argsstring>
        <name>repeatable_reader_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/tracereader.cc" line="54" column="1" bodyfile="/github/workspace/src/tracereader.cc" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tracereader_8cc_1a215cf188fb1e17dea3dc4a4e2c8ffaca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classchampsim_1_1tracereader" kindref="compound">champsim::tracereader</ref></type>
        <definition>champsim::tracereader get_tracereader</definition>
        <argsstring>(std::string fname, uint8_t cpu, bool is_cloudsuite, bool repeat)</argsstring>
        <name>get_tracereader</name>
        <param>
          <type>std::string</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cpu</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_cloudsuite</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>repeat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/tracereader.cc" line="56" column="23" bodyfile="/github/workspace/src/tracereader.cc" bodystart="56" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Copyright<sp/>2023<sp/>The<sp/>ChampSim<sp/>Contributors</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tracereader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;inf_stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;repeatable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">champsim</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal">uint64_t<sp/>tracereader::instr_unique_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref><sp/>apply_branch_target(<ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref><sp/>branch,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structooo__model__instr" kindref="compound">ooo_model_instr</ref>&amp;<sp/>target)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>branch.branch_target<sp/>=<sp/>(branch.is_branch<sp/>&amp;&amp;<sp/>branch.branch_taken)<sp/>?<sp/>target.ip<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>branch;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="classchampsim_1_1tracereader" kindref="compound">champsim::tracereader</ref><sp/>get_tracereader_for_type(std::string<sp/>fname,<sp/>uint8_t<sp/>cpu)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_gzip_compressed<sp/>=<sp/>(fname.substr(std::size(fname)<sp/>-<sp/>2)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;gz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_lzma_compressed<sp/>=<sp/>(fname.substr(std::size(fname)<sp/>-<sp/>2)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;xz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_bzip2_compressed<sp/>=<sp/>(fname.substr(std::size(fname)<sp/>-<sp/>3)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;bz2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_gzip_compressed)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classchampsim_1_1tracereader" kindref="compound">champsim::tracereader</ref>{R&lt;T,<sp/>champsim::inf_istream&lt;champsim::decomp_tags::gzip_tag_t&lt;&gt;&gt;&gt;(cpu,<sp/>fname)};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_lzma_compressed)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classchampsim_1_1tracereader" kindref="compound">champsim::tracereader</ref>{R&lt;T,<sp/>champsim::inf_istream&lt;champsim::decomp_tags::lzma_tag_t&lt;&gt;&gt;&gt;(cpu,<sp/>fname)};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_bzip2_compressed)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classchampsim_1_1tracereader" kindref="compound">champsim::tracereader</ref>{R&lt;T,<sp/>champsim::inf_istream&lt;champsim::decomp_tags::bzip2_tag_t&gt;&gt;(cpu,<sp/>fname)};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classchampsim_1_1tracereader" kindref="compound">champsim::tracereader</ref>{R&lt;T,<sp/>std::ifstream&gt;(cpu,<sp/>fname)};</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>champsim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structchampsim_1_1repeatable" kindref="compound">repeatable_reader_t</ref><sp/>=<sp/><ref refid="structchampsim_1_1repeatable" kindref="compound">champsim::repeatable&lt;champsim::bulk_tracereader&lt;T, S&gt;</ref>,<sp/>uint8_t,<sp/>std::string&gt;;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="classchampsim_1_1tracereader" kindref="compound">champsim::tracereader</ref><sp/>get_tracereader(std::string<sp/>fname,<sp/>uint8_t<sp/>cpu,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_cloudsuite,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>repeat)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_cloudsuite)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(repeat)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>champsim::get_tracereader_for_type&lt;repeatable_reader_t,<sp/>cloudsuite_instr&gt;(fname,<sp/>cpu);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>champsim::get_tracereader_for_type&lt;champsim::bulk_tracereader,<sp/>cloudsuite_instr&gt;(fname,<sp/>cpu);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(repeat)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>champsim::get_tracereader_for_type&lt;repeatable_reader_t,<sp/>input_instr&gt;(fname,<sp/>cpu);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>champsim::get_tracereader_for_type&lt;champsim::bulk_tracereader,<sp/>input_instr&gt;(fname,<sp/>cpu);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/github/workspace/src/tracereader.cc"/>
  </compounddef>
</doxygen>
