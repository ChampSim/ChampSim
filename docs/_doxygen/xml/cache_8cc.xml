<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="cache_8cc" kind="file" language="C++">
    <compoundname>cache.cc</compoundname>
    <includes refid="cache_8h" local="yes">cache.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cmath</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">numeric</includes>
    <includes local="no">fmt/core.h</includes>
    <includes local="no">fmt/ranges.h</includes>
    <includes refid="champsim_8h" local="yes">champsim.h</includes>
    <includes local="yes">champsim_constants.h</includes>
    <includes refid="deadlock_8h" local="yes">deadlock.h</includes>
    <includes refid="instruction_8h" local="yes">instruction.h</includes>
    <includes local="yes">util/algorithm.h</includes>
    <includes local="yes">util/span.h</includes>
    <incdepgraph>
      <node id="2">
        <label>cache.h</label>
        <link refid="cache_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>champsim.h</label>
        <link refid="champsim_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>channel.h</label>
        <link refid="channel_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>deadlock.h</label>
        <link refid="deadlock_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>instruction.h</label>
        <link refid="instruction_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>module_impl.h</label>
        <link refid="module__impl_8h_source"/>
      </node>
      <node id="19">
        <label>operable.h</label>
        <link refid="operable_8h_source"/>
      </node>
      <node id="34">
        <label>trace_instruction.h</label>
        <link refid="trace__instruction_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>cache.cc</label>
        <link refid="cache_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="4">
        <label>bitset</label>
      </node>
      <node id="21">
        <label>cache_module_decl.inc</label>
      </node>
      <node id="22">
        <label>cache_module_def.inc</label>
      </node>
      <node id="24">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>champsim_constants.h</label>
      </node>
      <node id="25">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="5">
        <label>deque</label>
      </node>
      <node id="12">
        <label>exception</label>
      </node>
      <node id="28">
        <label>fmt/core.h</label>
      </node>
      <node id="29">
        <label>fmt/ranges.h</label>
      </node>
      <node id="15">
        <label>functional</label>
      </node>
      <node id="26">
        <label>iomanip</label>
      </node>
      <node id="16">
        <label>limits</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="27">
        <label>numeric</label>
      </node>
      <node id="31">
        <label>optional</label>
      </node>
      <node id="7">
        <label>stdexcept</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="17">
        <label>string_view</label>
      </node>
      <node id="20">
        <label>type_traits</label>
      </node>
      <node id="35">
        <label>util/algorithm.h</label>
      </node>
      <node id="36">
        <label>util/span.h</label>
      </node>
      <node id="32">
        <label>util/type_traits.h</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="cache_8cc_1aef016955021c78256732fd1b540c9f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename It</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; It, It &gt;</type>
        <definition>std::pair&lt; It, It &gt; get_span</definition>
        <argsstring>(It anchor, typename std::iterator_traits&lt; It &gt;::difference_type set_idx, typename std::iterator_traits&lt; It &gt;::difference_type num_way)</argsstring>
        <name>get_span</name>
        <param>
          <type>It</type>
          <declname>anchor</declname>
        </param>
        <param>
          <type>typename std::iterator_traits&lt; It &gt;::difference_type</type>
          <declname>set_idx</declname>
        </param>
        <param>
          <type>typename std::iterator_traits&lt; It &gt;::difference_type</type>
          <declname>num_way</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/cache.cc" line="429" column="11" bodyfile="/github/workspace/src/cache.cc" bodystart="429" bodyend="433"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Copyright<sp/>2023<sp/>The<sp/>ChampSim<sp/>Contributors</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cache.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/ranges.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;champsim.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;champsim_constants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;deadlock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;instruction.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;util/algorithm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;util/span.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">CACHE::tag_lookup_type::tag_lookup_type(request_type<sp/>req,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>local_pref,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>skip)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>address(req.address),<sp/>v_address(req.v_address),<sp/>data(req.data),<sp/>ip(req.ip),<sp/>instr_id(req.instr_id),<sp/>pf_metadata(req.pf_metadata),<sp/>cpu(req.cpu),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type(req.type),<sp/>prefetch_from_this(local_pref),<sp/>skip_fill(skip),<sp/>is_translated(req.is_translated),<sp/>instr_depend_on_me(req.instr_depend_on_me)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">CACHE::mshr_type::mshr_type(tag_lookup_type<sp/>req,<sp/>uint64_t<sp/>cycle)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>address(req.address),<sp/>v_address(req.v_address),<sp/>data(req.data),<sp/>ip(req.ip),<sp/>instr_id(req.instr_id),<sp/>pf_metadata(req.pf_metadata),<sp/>cpu(req.cpu),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type(req.type),<sp/>prefetch_from_this(req.prefetch_from_this),<sp/>cycle_enqueued(cycle),<sp/>instr_depend_on_me(req.instr_depend_on_me),<sp/>to_return(req.to_return)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">CACHE::mshr_type<sp/>CACHE::mshr_type::merge(mshr_type<sp/>predecessor,<sp/>mshr_type<sp/>successor)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::vector&lt;std::reference_wrapper&lt;ooo_model_instr&gt;&gt;<sp/>merged_instr{};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>std::vector&lt;std::deque&lt;response_type&gt;*&gt;<sp/>merged_return{};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>std::set_union(std::begin(predecessor.instr_depend_on_me),<sp/>std::end(predecessor.instr_depend_on_me),<sp/>std::begin(successor.instr_depend_on_me),</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::end(successor.instr_depend_on_me),<sp/>std::back_inserter(merged_instr),<sp/>ooo_model_instr::program_order);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>std::set_union(std::begin(predecessor.to_return),<sp/>std::end(predecessor.to_return),<sp/>std::begin(successor.to_return),<sp/>std::end(successor.to_return),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(merged_return));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>mshr_type<sp/>retval{(successor.type<sp/>==<sp/>access_type::PREFETCH)<sp/>?<sp/>predecessor<sp/>:<sp/>successor};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>retval.instr_depend_on_me<sp/>=<sp/>merged_instr;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>retval.to_return<sp/>=<sp/>merged_return;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>retval.data<sp/>=<sp/>predecessor.data;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predecessor.event_cycle<sp/>&lt;<sp/>std::numeric_limits&lt;uint64_t&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>retval.event_cycle<sp/>=<sp/>predecessor.event_cycle;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(successor.type<sp/>==<sp/>access_type::PREFETCH)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[MSHR]<sp/>{}<sp/>address<sp/>{:#x}<sp/>type:<sp/>{}<sp/>into<sp/>address<sp/>{:#x}<sp/>type:<sp/>{}<sp/>event:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>successor.address,<sp/>access_type_names.at(champsim::to_underlying(successor.type)),<sp/>predecessor.address,<sp/>access_type_names.at(champsim::to_underlying(successor.type)),<sp/>retval.event_cycle);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[MSHR]<sp/>{}<sp/>address<sp/>{:#x}<sp/>type:<sp/>{}<sp/>into<sp/>address<sp/>{:#x}<sp/>type:<sp/>{}<sp/>event:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>predecessor.address,<sp/>access_type_names.at(champsim::to_underlying(predecessor.type)),<sp/>successor.address,<sp/>access_type_names.at(champsim::to_underlying(successor.type)),<sp/>retval.event_cycle);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">CACHE::BLOCK::BLOCK(mshr_type<sp/>mshr)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>valid(true),<sp/>prefetch(mshr.prefetch_from_this),<sp/>dirty(mshr.type<sp/>==<sp/>access_type::WRITE),<sp/>address(mshr.address),<sp/>v_address(mshr.v_address),<sp/>data(mshr.data)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CACHE::handle_fill(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mshr_type&amp;<sp/>fill_mshr)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>cpu<sp/>=<sp/>fill_mshr.cpu;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>victim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[set_begin,<sp/>set_end]<sp/>=<sp/>get_set_span(fill_mshr.address);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>way<sp/>=<sp/>std::find_if_not(set_begin,<sp/>set_end,<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.valid;<sp/>});</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(way<sp/>==<sp/>set_end)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>way<sp/>=<sp/>std::next(set_begin,<sp/>impl_find_victim(fill_mshr.cpu,<sp/>fill_mshr.instr_id,<sp/>get_set_index(fill_mshr.address),<sp/>&amp;*set_begin,<sp/>fill_mshr.ip,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mshr.address,<sp/>champsim::to_underlying(fill_mshr.type)));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>assert(set_begin<sp/>&lt;=<sp/>way);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>assert(way<sp/>&lt;=<sp/>set_end);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>way_idx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::distance(set_begin,<sp/>way));<sp/></highlight><highlight class="comment">//<sp/>cast<sp/>protected<sp/>by<sp/>earlier<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[{}]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>address:<sp/>{:#x}<sp/>v_address:<sp/>{:#x}<sp/>set:<sp/>{}<sp/>way:<sp/>{}<sp/>type:<sp/>{}<sp/>prefetch_metadata:<sp/>{}<sp/>cycle_enqueued:<sp/>{}<sp/>cycle:<sp/>{}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NAME,<sp/>__func__,<sp/>fill_mshr.instr_id,<sp/>fill_mshr.address,<sp/>fill_mshr.v_address,<sp/>get_set_index(fill_mshr.address),<sp/>way_idx,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>access_type_names.at(champsim::to_underlying(fill_mshr.type)),<sp/>fill_mshr.pf_metadata,<sp/>fill_mshr.cycle_enqueued,<sp/>current_cycle);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metadata_thru<sp/>=<sp/>fill_mshr.pf_metadata;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pkt_address<sp/>=<sp/>(virtual_prefetch<sp/>?<sp/>fill_mshr.v_address<sp/>:<sp/>fill_mshr.address)<sp/>&amp;<sp/>~champsim::bitmask(match_offset_bits<sp/>?<sp/>0<sp/>:<sp/>OFFSET_BITS);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(way<sp/>!=<sp/>set_end)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(way-&gt;valid<sp/>&amp;&amp;<sp/>way-&gt;dirty)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>request_type<sp/>writeback_packet;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeback_packet.cpu<sp/>=<sp/>fill_mshr.cpu;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeback_packet.address<sp/>=<sp/>way-&gt;address;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeback_packet.data<sp/>=<sp/>way-&gt;data;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeback_packet.instr_id<sp/>=<sp/>fill_mshr.instr_id;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeback_packet.ip<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeback_packet.type<sp/>=<sp/>access_type::WRITE;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeback_packet.pf_metadata<sp/>=<sp/>way-&gt;pf_metadata;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeback_packet.response_requested<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[{}]<sp/>{}<sp/>evict<sp/>address:<sp/>{:#x}<sp/>v_address:<sp/>{:#x}<sp/>prefetch_metadata:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>NAME,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__func__,<sp/>writeback_packet.address,<sp/>writeback_packet.v_address,<sp/>fill_mshr.pf_metadata);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/>lower_level-&gt;add_wq(writeback_packet);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>evicting_address<sp/>=<sp/>(ever_seen_data<sp/>?<sp/>way-&gt;address<sp/>:<sp/>way-&gt;v_address)<sp/>&amp;<sp/>~champsim::bitmask(match_offset_bits<sp/>?<sp/>0<sp/>:<sp/>OFFSET_BITS);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(way-&gt;prefetch)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++sim_stats.pf_useless;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fill_mshr.type<sp/>==<sp/>access_type::PREFETCH)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++sim_stats.pf_fill;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*way<sp/>=<sp/>BLOCK{fill_mshr};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metadata_thru<sp/>=<sp/>impl_prefetcher_cache_fill(pkt_address,<sp/>get_set_index(fill_mshr.address),<sp/>way_idx,<sp/>fill_mshr.type<sp/>==<sp/>access_type::PREFETCH,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evicting_address,<sp/>metadata_thru);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl_update_replacement_state(fill_mshr.cpu,<sp/>get_set_index(fill_mshr.address),<sp/>way_idx,<sp/>fill_mshr.address,<sp/>fill_mshr.ip,<sp/>evicting_address,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>champsim::to_underlying(fill_mshr.type),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>way-&gt;pf_metadata<sp/>=<sp/>metadata_thru;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bypass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fill_mshr.type<sp/>!=<sp/>access_type::WRITE);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>metadata_thru<sp/>=</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impl_prefetcher_cache_fill(pkt_address,<sp/>get_set_index(fill_mshr.address),<sp/>way_idx,<sp/>fill_mshr.type<sp/>==<sp/>access_type::PREFETCH,<sp/>0,<sp/>metadata_thru);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>impl_update_replacement_state(fill_mshr.cpu,<sp/>get_set_index(fill_mshr.address),<sp/>way_idx,<sp/>fill_mshr.address,<sp/>fill_mshr.ip,<sp/>0,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>champsim::to_underlying(fill_mshr.type),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>COLLECT<sp/>STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>sim_stats.total_miss_latency<sp/>+=<sp/>current_cycle<sp/>-<sp/>(fill_mshr.cycle_enqueued<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>response_type<sp/>response{fill_mshr.address,<sp/>fill_mshr.v_address,<sp/>fill_mshr.data,<sp/>metadata_thru,<sp/>fill_mshr.instr_depend_on_me};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>:<sp/>fill_mshr.to_return)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret-&gt;push_back(response);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CACHE::try_hit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tag_lookup_type&amp;<sp/>handle_pkt)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>cpu<sp/>=<sp/>handle_pkt.cpu;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[set_begin,<sp/>set_end]<sp/>=<sp/>get_set_span(handle_pkt.address);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>way<sp/>=<sp/>std::find_if(set_begin,<sp/>set_end,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[match<sp/>=<sp/>handle_pkt.address<sp/>&gt;&gt;<sp/>OFFSET_BITS,<sp/>shamt<sp/>=<sp/>OFFSET_BITS](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{<sp/>return<sp/>(entry.address<sp/>&gt;&gt;<sp/>shamt)<sp/>==<sp/>match;<sp/>});</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hit<sp/>=<sp/>(way<sp/>!=<sp/>set_end);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>useful_prefetch<sp/>=<sp/>(hit<sp/>&amp;&amp;<sp/>way-&gt;prefetch<sp/>&amp;&amp;<sp/>!handle_pkt.prefetch_from_this);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[{}]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>address:<sp/>{:#x}<sp/>v_address:<sp/>{:#x}<sp/>data:<sp/>{:#x}<sp/>set:<sp/>{}<sp/>way:<sp/>{}<sp/>({})<sp/>type:<sp/>{}<sp/>cycle:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>NAME,<sp/>__func__,<sp/>handle_pkt.instr_id,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle_pkt.address,<sp/>handle_pkt.v_address,<sp/>handle_pkt.data,<sp/>get_set_index(handle_pkt.address),<sp/>std::distance(set_begin,<sp/>way),<sp/>hit<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;HIT&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;MISS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>access_type_names.at(champsim::to_underlying(handle_pkt.type)),<sp/>current_cycle);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>prefetcher<sp/>on<sp/>load<sp/>instructions<sp/>and<sp/>prefetches<sp/>from<sp/>upper<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metadata_thru<sp/>=<sp/>handle_pkt.pf_metadata;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_activate_prefetcher(handle_pkt))<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>pf_base_addr<sp/>=<sp/>(virtual_prefetch<sp/>?<sp/>handle_pkt.v_address<sp/>:<sp/>handle_pkt.address)<sp/>&amp;<sp/>~champsim::bitmask(match_offset_bits<sp/>?<sp/>0<sp/>:<sp/>OFFSET_BITS);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>metadata_thru<sp/>=<sp/>impl_prefetcher_cache_operate(pf_base_addr,<sp/>handle_pkt.ip,<sp/>hit,<sp/>useful_prefetch,<sp/>champsim::to_underlying(handle_pkt.type),<sp/>metadata_thru);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hit)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>++sim_stats.hits[champsim::to_underlying(handle_pkt.type)][handle_pkt.cpu];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>replacement<sp/>policy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>way_idx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::distance(set_begin,<sp/>way));<sp/></highlight><highlight class="comment">//<sp/>cast<sp/>protected<sp/>by<sp/>earlier<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>impl_update_replacement_state(handle_pkt.cpu,<sp/>get_set_index(handle_pkt.address),<sp/>way_idx,<sp/>way-&gt;address,<sp/>handle_pkt.ip,<sp/>0,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>champsim::to_underlying(handle_pkt.type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>response_type<sp/>response{handle_pkt.address,<sp/>handle_pkt.v_address,<sp/>way-&gt;data,<sp/>metadata_thru,<sp/>handle_pkt.instr_depend_on_me};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>:<sp/>handle_pkt.to_return)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret-&gt;push_back(response);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>way-&gt;dirty<sp/>|=<sp/>(handle_pkt.type<sp/>==<sp/>access_type::WRITE);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>prefetch<sp/>stats<sp/>and<sp/>reset<sp/>prefetch<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useful_prefetch)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++sim_stats.pf_useful;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>way-&gt;prefetch<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hit;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CACHE::handle_miss(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tag_lookup_type&amp;<sp/>handle_pkt)</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[{}]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>address:<sp/>{:#x}<sp/>v_address:<sp/>{:#x}<sp/>type:<sp/>{}<sp/>local_prefetch:<sp/>{}<sp/>cycle:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>NAME,<sp/>__func__,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle_pkt.instr_id,<sp/>handle_pkt.address,<sp/>handle_pkt.v_address,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>access_type_names.at(champsim::to_underlying(handle_pkt.type)),<sp/>handle_pkt.prefetch_from_this,<sp/>current_cycle);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>mshr_type<sp/>to_allocate{handle_pkt,<sp/>current_cycle};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>cpu<sp/>=<sp/>handle_pkt.cpu;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>mshr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mshr_entry<sp/>=<sp/>std::find_if(std::begin(MSHR),<sp/>std::end(MSHR),<sp/>[match<sp/>=<sp/>handle_pkt.address<sp/>&gt;&gt;<sp/>OFFSET_BITS,<sp/>shamt<sp/>=<sp/>OFFSET_BITS](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(entry.address<sp/>&gt;&gt;<sp/>shamt)<sp/>==<sp/>match;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mshr_full<sp/>=<sp/>(MSHR.size()<sp/>==<sp/>MSHR_SIZE);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mshr_entry<sp/>!=<sp/>MSHR.end())<sp/></highlight><highlight class="comment">//<sp/>miss<sp/>already<sp/>inflight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mshr_entry-&gt;type<sp/>==<sp/>access_type::PREFETCH<sp/>&amp;&amp;<sp/>handle_pkt.type<sp/>!=<sp/>access_type::PREFETCH)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>prefetch<sp/>as<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mshr_entry-&gt;prefetch_from_this)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++sim_stats.pf_useful;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>*mshr_entry<sp/>=<sp/>mshr_type::merge(*mshr_entry,<sp/>to_allocate);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mshr_full)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>not<sp/>enough<sp/>MSHR<sp/>resource</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[{}]<sp/>{}<sp/>MSHR<sp/>full\n&quot;</highlight><highlight class="normal">,<sp/>NAME,<sp/>__func__);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>should<sp/>we<sp/>allow<sp/>prefetches<sp/>anyway<sp/>if<sp/>they<sp/>will<sp/>not<sp/>be<sp/>filled<sp/>to<sp/>this<sp/>level?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>request_type<sp/>fwd_pkt;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.asid[0]<sp/>=<sp/>handle_pkt.asid[0];</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.asid[1]<sp/>=<sp/>handle_pkt.asid[1];</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.type<sp/>=<sp/>(handle_pkt.type<sp/>==<sp/>access_type::WRITE)<sp/>?<sp/>access_type::RFO<sp/>:<sp/>handle_pkt.type;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.pf_metadata<sp/>=<sp/>handle_pkt.pf_metadata;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.cpu<sp/>=<sp/>handle_pkt.cpu;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.address<sp/>=<sp/>handle_pkt.address;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.v_address<sp/>=<sp/>handle_pkt.v_address;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.data<sp/>=<sp/>handle_pkt.data;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.instr_id<sp/>=<sp/>handle_pkt.instr_id;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.ip<sp/>=<sp/>handle_pkt.ip;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.instr_depend_on_me<sp/>=<sp/>handle_pkt.instr_depend_on_me;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>fwd_pkt.response_requested<sp/>=<sp/>(!handle_pkt.prefetch_from_this<sp/>||<sp/>!handle_pkt.skip_fill);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefetch_as_load<sp/>||<sp/>handle_pkt.type<sp/>!=<sp/>access_type::PREFETCH)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/>lower_level-&gt;add_rq(fwd_pkt);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/>lower_level-&gt;add_pq(fwd_pkt);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[{}]<sp/>{}<sp/>could<sp/>not<sp/>send<sp/>to<sp/>lower\n&quot;</highlight><highlight class="normal">,<sp/>NAME,<sp/>__func__);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>an<sp/>MSHR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwd_pkt.response_requested)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MSHR.push_back(to_allocate);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MSHR.back().pf_metadata<sp/>=<sp/>fwd_pkt.pf_metadata;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>++sim_stats.misses[champsim::to_underlying(handle_pkt.type)][handle_pkt.cpu];</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CACHE::handle_write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tag_lookup_type&amp;<sp/>handle_pkt)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[{}]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>address:<sp/>{:#x}<sp/>v_address:<sp/>{:#x}<sp/>type:<sp/>{}<sp/>local_prefetch:<sp/>{}<sp/>cycle:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>NAME,<sp/>__func__,<sp/>handle_pkt.instr_id,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle_pkt.address,<sp/>handle_pkt.v_address,<sp/>access_type_names.at(champsim::to_underlying(handle_pkt.type)),<sp/>handle_pkt.prefetch_from_this,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_cycle);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>inflight_writes.emplace_back(handle_pkt,<sp/>current_cycle);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>inflight_writes.back().event_cycle<sp/>=<sp/>current_cycle<sp/>+<sp/>(warmup<sp/>?<sp/>0<sp/>:<sp/>FILL_LATENCY);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>++sim_stats.misses[champsim::to_underlying(handle_pkt.type)][handle_pkt.cpu];</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UpdateRequest&gt;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>CACHE::initiate_tag_check(<ref refid="classchampsim_1_1channel" kindref="compound">champsim::channel</ref>*<sp/>ul)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[cycle<sp/>=<sp/>current_cycle<sp/>+<sp/>(warmup<sp/>?<sp/>0<sp/>:<sp/>HIT_LATENCY),<sp/>ul](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>CACHE::tag_lookup_type<sp/>retval{entry};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>retval.event_cycle<sp/>=<sp/>cycle;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(UpdateRequest)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry.response_requested)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval.to_return<sp/>=<sp/>{&amp;ul-&gt;returned};</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[TAG]<sp/>initiate_tag_check<sp/>instr_id:<sp/>{}<sp/>address:<sp/>{:#x}<sp/>v_address:<sp/>{:#x}<sp/>type:<sp/>{}<sp/>response_requested:<sp/>{}<sp/>event:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>retval.instr_id,<sp/>retval.address,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval.v_address,<sp/>access_type_names.at(champsim::to_underlying(retval.type)),<sp/>!std::empty(retval.to_return),<sp/>retval.event_cycle);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>CACHE::operate()</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>progress{0};</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ul<sp/>:<sp/>upper_levels)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;check_collision();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finish<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>std::for_each(std::cbegin(lower_level-&gt;returned),<sp/>std::cend(lower_level-&gt;returned),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pkt)<sp/>{<sp/>this-&gt;finish_packet(pkt);<sp/>});</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>std::distance(std::cbegin(lower_level-&gt;returned),<sp/>std::cend(lower_level-&gt;returned));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>lower_level-&gt;returned.clear();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finish<sp/>translations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lower_translate<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(std::cbegin(lower_translate-&gt;returned),<sp/>std::cend(lower_translate-&gt;returned),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pkt)<sp/>{<sp/>this-&gt;finish_translation(pkt);<sp/>});</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>progress<sp/>+=<sp/>std::distance(std::cbegin(lower_translate-&gt;returned),<sp/>std::cend(lower_translate-&gt;returned));</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>lower_translate-&gt;returned.clear();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>fills</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fill_bw<sp/>=<sp/>MAX_FILL;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>q<sp/>:<sp/>{std::ref(MSHR),<sp/>std::ref(inflight_writes)})<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[fill_begin,<sp/>fill_end]<sp/>=</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>champsim::get_span_p(std::cbegin(q.get()),<sp/>std::cend(q.get()),<sp/>fill_bw,<sp/>[cycle<sp/>=<sp/>current_cycle](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/>return<sp/>x.event_cycle<sp/>&lt;=<sp/>cycle;<sp/>});</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>complete_end<sp/>=<sp/>std::find_if_not(fill_begin,<sp/>fill_end,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;handle_fill(x);<sp/>});</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_bw<sp/>-=<sp/>std::distance(fill_begin,<sp/>complete_end);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>q.get().erase(fill_begin,<sp/>complete_end);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>MAX_FILL<sp/>-<sp/>fill_bw;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initiate<sp/>tag<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_bw<sp/>=<sp/>std::max(0ll,<sp/>std::min&lt;long<sp/>long&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(MAX_TAG),<sp/>MAX_TAG<sp/>*<sp/>HIT_LATENCY<sp/>-<sp/>std::size(inflight_tag_check)));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>can_translate<sp/>=<sp/>[avail<sp/>=<sp/>(std::size(translation_stash)<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(MSHR_SIZE))](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avail<sp/>||<sp/>entry.is_translated;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stash_bandwidth_consumed<sp/>=<sp/>champsim::transform_while_n(</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>translation_stash,<sp/>std::back_inserter(inflight_tag_check),<sp/>tag_bw,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry.is_translated;<sp/>},<sp/>initiate_tag_check&lt;false&gt;());</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>tag_bw<sp/>-=<sp/>stash_bandwidth_consumed;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>stash_bandwidth_consumed;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>std::vector&lt;long<sp/>long&gt;<sp/>channels_bandwidth_consumed{};</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>ul<sp/>:<sp/>upper_levels)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>q<sp/>:<sp/>{std::ref(ul-&gt;WQ),<sp/>std::ref(ul-&gt;RQ),<sp/>std::ref(ul-&gt;PQ)})<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bandwidth_consumed<sp/>=<sp/>champsim::transform_while_n(q.get(),<sp/>std::back_inserter(inflight_tag_check),<sp/>tag_bw,<sp/>can_translate,<sp/>initiate_tag_check&lt;true&gt;(ul));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channels_bandwidth_consumed.push_back(bandwidth_consumed);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tag_bw<sp/>-=<sp/>bandwidth_consumed;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>progress<sp/>+=<sp/>bandwidth_consumed;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pq_bandwidth_consumed<sp/>=<sp/>champsim::transform_while_n(internal_PQ,<sp/>std::back_inserter(inflight_tag_check),<sp/>tag_bw,<sp/>can_translate,<sp/>initiate_tag_check&lt;false&gt;());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>tag_bw<sp/>-=<sp/>pq_bandwidth_consumed;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>pq_bandwidth_consumed;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Issue<sp/>translations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>issue_translation();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>entries<sp/>that<sp/>would<sp/>be<sp/>ready<sp/>except<sp/>that<sp/>they<sp/>have<sp/>not<sp/>finished<sp/>translation,<sp/>move<sp/>them<sp/>to<sp/>the<sp/>stash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[last_not_missed,<sp/>stash_end]<sp/>=</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>champsim::extract_if(std::begin(inflight_tag_check),<sp/>std::end(inflight_tag_check),<sp/>std::back_inserter(translation_stash),</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[cycle<sp/>=<sp/>current_cycle](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.event_cycle<sp/>&lt;<sp/>cycle<sp/>&amp;&amp;<sp/>!x.is_translated;<sp/>});</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>std::distance(last_not_missed,<sp/>std::end(inflight_tag_check));</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>inflight_tag_check.erase(last_not_missed,<sp/>std::end(inflight_tag_check));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>tag<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>do_tag_check<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pkt)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;try_hit(pkt))</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pkt.type<sp/>==<sp/>access_type::WRITE<sp/>&amp;&amp;<sp/>!this-&gt;match_offset_bits)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;handle_write(pkt);<sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>writes<sp/>(that<sp/>is,<sp/>writebacks)<sp/>like<sp/>fills</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;handle_miss(pkt);<sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>writes<sp/>(that<sp/>is,<sp/>stores)<sp/>like<sp/>reads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[tag_check_ready_begin,<sp/>tag_check_ready_end]<sp/>=</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>champsim::get_span_p(std::begin(inflight_tag_check),<sp/>std::end(inflight_tag_check),<sp/>MAX_TAG,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[cycle<sp/>=<sp/>current_cycle](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pkt)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pkt.event_cycle<sp/>&lt;=<sp/>cycle<sp/>&amp;&amp;<sp/>pkt.is_translated;<sp/>});</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>finish_tag_check_end<sp/>=<sp/>std::find_if_not(tag_check_ready_begin,<sp/>tag_check_ready_end,<sp/>do_tag_check);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_bw_consumed<sp/>=<sp/>std::distance(tag_check_ready_begin,<sp/>finish_tag_check_end);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>progress<sp/>+=<sp/>std::distance(tag_check_ready_begin,<sp/>finish_tag_check_end);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>inflight_tag_check.erase(tag_check_ready_begin,<sp/>finish_tag_check_end);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>impl_prefetcher_cycle_operate();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[{}]<sp/>{}<sp/>cycle<sp/>completed:<sp/>{}<sp/>tags<sp/>checked:<sp/>{}<sp/>remaining:<sp/>{}<sp/>stash<sp/>consumed:<sp/>{}<sp/>remaining:<sp/>{}<sp/>channel<sp/>consumed:<sp/>{}<sp/>pq<sp/>consumed<sp/>{}<sp/>unused<sp/>consume<sp/>bw<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>NAME,<sp/>__func__,<sp/>current_cycle,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag_bw_consumed,<sp/>std::size(inflight_tag_check),</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stash_bandwidth_consumed,<sp/>std::size(translation_stash),</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels_bandwidth_consumed,<sp/>pq_bandwidth_consumed,<sp/>tag_bw);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>progress;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_START<sp/>exclude<sp/>deprecated<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">uint64_t<sp/>CACHE::get_set(uint64_t<sp/>address)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_set_index(address);<sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_STOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">std::size_t<sp/>CACHE::get_set_index(uint64_t<sp/>address)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(address<sp/>&gt;&gt;<sp/>OFFSET_BITS)<sp/>&amp;<sp/>champsim::bitmask(champsim::lg2(NUM_SET));<sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It&gt;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">std::pair&lt;It,<sp/>It&gt;<sp/>get_span(It<sp/>anchor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;It&gt;::difference_type<sp/>set_idx,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;It&gt;::difference_type<sp/>num_way)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>std::next(anchor,<sp/>set_idx<sp/>*<sp/>num_way);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{std::move(begin),<sp/>std::next(begin,<sp/>num_way)};</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>CACHE::get_set_span(uint64_t<sp/>address)<sp/>-&gt;<sp/>std::pair&lt;std::vector&lt;BLOCK&gt;::iterator,<sp/>std::vector&lt;BLOCK&gt;::iterator&gt;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>set_idx<sp/>=<sp/>get_set_index(address);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>assert(set_idx<sp/>&lt;<sp/>NUM_SET);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_span(std::begin(block),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::vector&lt;BLOCK&gt;::difference_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(set_idx),<sp/>NUM_WAY);<sp/></highlight><highlight class="comment">//<sp/>safe<sp/>cast<sp/>because<sp/>of<sp/>prior<sp/>assert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>CACHE::get_set_span(uint64_t<sp/>address)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>std::pair&lt;std::vector&lt;BLOCK&gt;::const_iterator,<sp/>std::vector&lt;BLOCK&gt;::const_iterator&gt;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>set_idx<sp/>=<sp/>get_set_index(address);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>assert(set_idx<sp/>&lt;<sp/>NUM_SET);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_span(std::cbegin(block),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::vector&lt;BLOCK&gt;::difference_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(set_idx),<sp/>NUM_WAY);<sp/></highlight><highlight class="comment">//<sp/>safe<sp/>cast<sp/>because<sp/>of<sp/>prior<sp/>assert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_START<sp/>exclude<sp/>deprecated<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">uint64_t<sp/>CACHE::get_way(uint64_t<sp/>address,<sp/>uint64_t)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="451"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[begin,<sp/>end]<sp/>=<sp/>get_set_span(address);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::distance(</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin,<sp/>std::find_if(begin,<sp/>end,<sp/>[match<sp/>=<sp/>address<sp/>&gt;&gt;<sp/>OFFSET_BITS,<sp/>shamt<sp/>=<sp/>OFFSET_BITS](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(entry.address<sp/>&gt;&gt;<sp/>shamt)<sp/>==<sp/>match;<sp/>}));</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_STOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">uint64_t<sp/>CACHE::invalidate_entry(uint64_t<sp/>inval_addr)</highlight></codeline>
<codeline lineno="459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[begin,<sp/>end]<sp/>=<sp/>get_set_span(inval_addr);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inv_way<sp/>=</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(begin,<sp/>end,<sp/>[match<sp/>=<sp/>inval_addr<sp/>&gt;&gt;<sp/>OFFSET_BITS,<sp/>shamt<sp/>=<sp/>OFFSET_BITS](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(entry.address<sp/>&gt;&gt;<sp/>shamt)<sp/>==<sp/>match;<sp/>});</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv_way<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>inv_way-&gt;valid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::distance(begin,<sp/>inv_way);</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CACHE::prefetch_line(uint64_t<sp/>pf_addr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fill_this_level,<sp/>uint32_t<sp/>prefetch_metadata)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>++sim_stats.pf_requested;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::size(internal_PQ)<sp/>&gt;=<sp/>PQ_SIZE)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>request_type<sp/>pf_packet;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>pf_packet.type<sp/>=<sp/>access_type::PREFETCH;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>pf_packet.pf_metadata<sp/>=<sp/>prefetch_metadata;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>pf_packet.cpu<sp/>=<sp/>cpu;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>pf_packet.address<sp/>=<sp/>pf_addr;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>pf_packet.v_address<sp/>=<sp/>virtual_prefetch<sp/>?<sp/>pf_addr<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>pf_packet.is_translated<sp/>=<sp/>!virtual_prefetch;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>internal_PQ.emplace_back(pf_packet,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>!fill_this_level);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>++sim_stats.pf_issued;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_START<sp/>exclude<sp/>deprecated<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CACHE::prefetch_line(uint64_t,<sp/>uint64_t,<sp/>uint64_t<sp/>pf_addr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fill_this_level,<sp/>uint32_t<sp/>prefetch_metadata)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prefetch_line(pf_addr,<sp/>fill_this_level,<sp/>prefetch_metadata);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_STOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CACHE::finish_packet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>response_type&amp;<sp/>packet)</highlight></codeline>
<codeline lineno="499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>MSHR<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mshr_entry<sp/>=<sp/>std::find_if(std::begin(MSHR),<sp/>std::end(MSHR),</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[match<sp/>=<sp/>packet.address<sp/>&gt;&gt;<sp/>OFFSET_BITS,<sp/>shamt<sp/>=<sp/>OFFSET_BITS](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{<sp/>return<sp/>(entry.address<sp/>&gt;&gt;<sp/>shamt)<sp/>==<sp/>match;<sp/>});</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_unreturned<sp/>=<sp/>std::find_if(MSHR.begin(),<sp/>MSHR.end(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>return<sp/>x.event_cycle<sp/>==<sp/>std::numeric_limits&lt;uint64_t&gt;::max();<sp/>});</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mshr_entry<sp/>==<sp/>MSHR.end())<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[{}_MSHR]<sp/>{}<sp/>cannot<sp/>find<sp/>a<sp/>matching<sp/>entry!<sp/>address:<sp/>{:#x}<sp/>v_address:<sp/>{:#x}\n&quot;</highlight><highlight class="normal">,<sp/>NAME,<sp/>__func__,<sp/>packet.address,<sp/>packet.v_address);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(0);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MSHR<sp/>holds<sp/>the<sp/>most<sp/>updated<sp/>information<sp/>about<sp/>this<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>mshr_entry-&gt;data<sp/>=<sp/>packet.data;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>mshr_entry-&gt;pf_metadata<sp/>=<sp/>packet.pf_metadata;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>mshr_entry-&gt;event_cycle<sp/>=<sp/>current_cycle<sp/>+<sp/>(warmup<sp/>?<sp/>0<sp/>:<sp/>FILL_LATENCY);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[{}_MSHR]<sp/>{}<sp/>instr_id:<sp/>{}<sp/>address:<sp/>{:#x}<sp/>data:<sp/>{:#x}<sp/>type:<sp/>{}<sp/>to_finish:<sp/>{}<sp/>event:<sp/>{}<sp/>current:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>NAME,<sp/>__func__,<sp/>mshr_entry-&gt;instr_id,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mshr_entry-&gt;address,<sp/>mshr_entry-&gt;data,<sp/>access_type_names.at(champsim::to_underlying(mshr_entry-&gt;type)),<sp/>std::size(lower_level-&gt;returned),</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mshr_entry-&gt;event_cycle,<sp/>current_cycle);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Order<sp/>this<sp/>entry<sp/>after<sp/>previously-returned<sp/>entries,<sp/>but<sp/>before<sp/>non-returned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>std::iter_swap(mshr_entry,<sp/>first_unreturned);</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CACHE::finish_translation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>response_type&amp;<sp/>packet)</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matches_vpage<sp/>=<sp/>[page_num<sp/>=<sp/>packet.v_address<sp/>&gt;&gt;<sp/>LOG2_PAGE_SIZE](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(entry.v_address<sp/>&gt;&gt;<sp/>LOG2_PAGE_SIZE)<sp/>==<sp/>page_num;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mark_translated<sp/>=<sp/>[p_page<sp/>=<sp/>packet.data,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>entry.address<sp/>=<sp/>champsim::splice_bits(p_page,<sp/>entry.v_address,<sp/>LOG2_PAGE_SIZE);<sp/></highlight><highlight class="comment">//<sp/>translated<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>entry.is_translated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>entry<sp/>is<sp/>now<sp/>translated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[{}_TRANSLATE]<sp/>finish_translation<sp/>paddr:<sp/>{:#x}<sp/>vaddr:<sp/>{:#x}<sp/>cycle:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>this-&gt;NAME,<sp/>entry.address,<sp/>entry.v_address,<sp/>this-&gt;current_cycle);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restart<sp/>stashed<sp/>translations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>finish_begin<sp/>=<sp/>std::find_if_not(std::begin(translation_stash),<sp/>std::end(translation_stash),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.is_translated;<sp/>});</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>finish_end<sp/>=<sp/>std::stable_partition(finish_begin,<sp/>std::end(translation_stash),<sp/>matches_vpage);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>std::for_each(finish_begin,<sp/>finish_end,<sp/>mark_translated);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>all<sp/>packets<sp/>that<sp/>match<sp/>the<sp/>page<sp/>of<sp/>the<sp/>returned<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry<sp/>:<sp/>inflight_tag_check)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((entry.v_address<sp/>&gt;&gt;<sp/>LOG2_PAGE_SIZE)<sp/>==<sp/>(packet.v_address<sp/>&gt;&gt;<sp/>LOG2_PAGE_SIZE))<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mark_translated(entry);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CACHE::issue_translation()</highlight></codeline>
<codeline lineno="555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>issue<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>q_entry)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!q_entry.translate_issued<sp/>&amp;&amp;<sp/>!q_entry.is_translated)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>request_type<sp/>fwd_pkt;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwd_pkt.asid[0]<sp/>=<sp/>q_entry.asid[0];</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwd_pkt.asid[1]<sp/>=<sp/>q_entry.asid[1];</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwd_pkt.type<sp/>=<sp/>access_type::LOAD;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwd_pkt.cpu<sp/>=<sp/>q_entry.cpu;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwd_pkt.address<sp/>=<sp/>q_entry.address;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwd_pkt.v_address<sp/>=<sp/>q_entry.v_address;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwd_pkt.data<sp/>=<sp/>q_entry.data;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwd_pkt.instr_id<sp/>=<sp/>q_entry.instr_id;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwd_pkt.ip<sp/>=<sp/>q_entry.ip;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwd_pkt.instr_depend_on_me<sp/>=<sp/>q_entry.instr_depend_on_me;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwd_pkt.is_translated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_entry.translate_issued<sp/>=<sp/>this-&gt;lower_translate-&gt;add_rq(fwd_pkt);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(champsim::debug_print)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q_entry.translate_issued)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;[TRANSLATE]<sp/>do_issue_translation<sp/>instr_id:<sp/>{}<sp/>paddr:<sp/>{:#x}<sp/>vaddr:<sp/>{:#x}<sp/>cycle:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>q_entry.instr_id,<sp/>q_entry.address,<sp/>q_entry.v_address,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>access_type_names.at(champsim::to_underlying(q_entry.type)));</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>std::for_each(std::begin(inflight_tag_check),<sp/>std::end(inflight_tag_check),<sp/>issue);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>std::for_each(std::begin(translation_stash),<sp/>std::end(translation_stash),<sp/>issue);</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">std::size_t<sp/>CACHE::get_mshr_occupancy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::size(MSHR);<sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">std::vector&lt;std::size_t&gt;<sp/>CACHE::get_rq_occupancy()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="590"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>retval;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>std::transform(std::begin(upper_levels),<sp/>std::end(upper_levels),<sp/>std::back_inserter(retval),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ulptr)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ulptr-&gt;rq_occupancy();<sp/>});</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">std::vector&lt;std::size_t&gt;<sp/>CACHE::get_wq_occupancy()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="597"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>retval;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>std::transform(std::begin(upper_levels),<sp/>std::end(upper_levels),<sp/>std::back_inserter(retval),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ulptr)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ulptr-&gt;wq_occupancy();<sp/>});</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal">std::vector&lt;std::size_t&gt;<sp/>CACHE::get_pq_occupancy()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="604"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>retval;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>std::transform(std::begin(upper_levels),<sp/>std::end(upper_levels),<sp/>std::back_inserter(retval),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ulptr)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ulptr-&gt;pq_occupancy();<sp/>});</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>retval.push_back(std::size(internal_PQ));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_START<sp/>exclude<sp/>deprecated<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">std::size_t<sp/>CACHE::get_occupancy(uint8_t<sp/>queue_type,<sp/>uint64_t)</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queue_type<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_mshr_occupancy();</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_STOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">std::size_t<sp/>CACHE::get_mshr_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MSHR_SIZE;<sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">std::vector&lt;std::size_t&gt;<sp/>CACHE::get_rq_size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="623"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>retval;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>std::transform(std::begin(upper_levels),<sp/>std::end(upper_levels),<sp/>std::back_inserter(retval),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ulptr)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ulptr-&gt;rq_size();<sp/>});</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal">std::vector&lt;std::size_t&gt;<sp/>CACHE::get_wq_size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="630"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>retval;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>std::transform(std::begin(upper_levels),<sp/>std::end(upper_levels),<sp/>std::back_inserter(retval),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ulptr)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ulptr-&gt;wq_size();<sp/>});</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal">std::vector&lt;std::size_t&gt;<sp/>CACHE::get_pq_size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="637"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>retval;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>std::transform(std::begin(upper_levels),<sp/>std::end(upper_levels),<sp/>std::back_inserter(retval),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ulptr)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ulptr-&gt;pq_size();<sp/>});</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>retval.push_back(PQ_SIZE);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_START<sp/>exclude<sp/>deprecated<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal">std::size_t<sp/>CACHE::get_size(uint8_t<sp/>queue_type,<sp/>uint64_t)</highlight></codeline>
<codeline lineno="646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queue_type<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_mshr_size();</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_STOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>occupancy_ratio(std::size_t<sp/>occ,<sp/>std::size_t<sp/>sz)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::ceil(occ)<sp/>/<sp/>std::ceil(sz);<sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">std::vector&lt;double&gt;<sp/>occupancy_ratio_vec(std::vector&lt;std::size_t&gt;<sp/>occ,<sp/>std::vector&lt;std::size_t&gt;<sp/>sz)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>retval;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>std::transform(std::begin(occ),<sp/>std::end(occ),<sp/>std::begin(sz),<sp/>std::back_inserter(retval),<sp/>occupancy_ratio);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CACHE::get_mshr_occupancy_ratio()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>return<sp/>::occupancy_ratio(get_mshr_occupancy(),<sp/>get_mshr_size());<sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">std::vector&lt;double&gt;<sp/>CACHE::get_rq_occupancy_ratio()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>return<sp/>::occupancy_ratio_vec(get_rq_occupancy(),<sp/>get_rq_size());<sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal">std::vector&lt;double&gt;<sp/>CACHE::get_wq_occupancy_ratio()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>return<sp/>::occupancy_ratio_vec(get_wq_occupancy(),<sp/>get_wq_size());<sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal">std::vector&lt;double&gt;<sp/>CACHE::get_pq_occupancy_ratio()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>return<sp/>::occupancy_ratio_vec(get_pq_occupancy(),<sp/>get_pq_size());<sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CACHE::initialize()</highlight></codeline>
<codeline lineno="674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>impl_prefetcher_initialize();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>impl_initialize_replacement();</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CACHE::begin_phase()</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>stats_type<sp/>new_roi_stats,<sp/>new_sim_stats;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>new_roi_stats.name<sp/>=<sp/>NAME;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>new_sim_stats.name<sp/>=<sp/>NAME;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>roi_stats<sp/>=<sp/>new_roi_stats;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>sim_stats<sp/>=<sp/>new_sim_stats;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ul<sp/>:<sp/>upper_levels)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>channel_type::stats_type<sp/>ul_new_roi_stats,<sp/>ul_new_sim_stats;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats<sp/>=<sp/>ul_new_roi_stats;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;sim_stats<sp/>=<sp/>ul_new_sim_stats;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CACHE::end_phase(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>finished_cpu)</highlight></codeline>
<codeline lineno="697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>total_miss<sp/>=<sp/>0ull;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>:<sp/>{access_type::LOAD,<sp/>access_type::RFO,<sp/>access_type::PREFETCH,<sp/>access_type::WRITE,<sp/>access_type::TRANSLATION})<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>total_miss<sp/>=</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::accumulate(std::begin(sim_stats.misses.at(champsim::to_underlying(type))),<sp/>std::end(sim_stats.misses.at(champsim::to_underlying(type))),<sp/>total_miss);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>sim_stats.avg_miss_latency<sp/>=<sp/>std::ceil(sim_stats.total_miss_latency)<sp/>/<sp/>std::ceil(total_miss);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>roi_stats.total_miss_latency<sp/>=<sp/>sim_stats.total_miss_latency;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>roi_stats.avg_miss_latency<sp/>=<sp/>std::ceil(roi_stats.total_miss_latency)<sp/>/<sp/>std::ceil(total_miss);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>:<sp/>{access_type::LOAD,<sp/>access_type::RFO,<sp/>access_type::PREFETCH,<sp/>access_type::WRITE,<sp/>access_type::TRANSLATION})<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>roi_stats.hits.at(champsim::to_underlying(type)).at(finished_cpu)<sp/>=<sp/>sim_stats.hits.at(champsim::to_underlying(type)).at(finished_cpu);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>roi_stats.misses.at(champsim::to_underlying(type)).at(finished_cpu)<sp/>=<sp/>sim_stats.misses.at(champsim::to_underlying(type)).at(finished_cpu);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>roi_stats.pf_requested<sp/>=<sp/>sim_stats.pf_requested;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>roi_stats.pf_issued<sp/>=<sp/>sim_stats.pf_issued;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>roi_stats.pf_useful<sp/>=<sp/>sim_stats.pf_useful;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>roi_stats.pf_useless<sp/>=<sp/>sim_stats.pf_useless;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>roi_stats.pf_fill<sp/>=<sp/>sim_stats.pf_fill;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ul<sp/>:<sp/>upper_levels)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.RQ_ACCESS<sp/>=<sp/>ul-&gt;sim_stats.RQ_ACCESS;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.RQ_MERGED<sp/>=<sp/>ul-&gt;sim_stats.RQ_MERGED;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.RQ_FULL<sp/>=<sp/>ul-&gt;sim_stats.RQ_FULL;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.RQ_TO_CACHE<sp/>=<sp/>ul-&gt;sim_stats.RQ_TO_CACHE;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.PQ_ACCESS<sp/>=<sp/>ul-&gt;sim_stats.PQ_ACCESS;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.PQ_MERGED<sp/>=<sp/>ul-&gt;sim_stats.PQ_MERGED;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.PQ_FULL<sp/>=<sp/>ul-&gt;sim_stats.PQ_FULL;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.PQ_TO_CACHE<sp/>=<sp/>ul-&gt;sim_stats.PQ_TO_CACHE;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.WQ_ACCESS<sp/>=<sp/>ul-&gt;sim_stats.WQ_ACCESS;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.WQ_MERGED<sp/>=<sp/>ul-&gt;sim_stats.WQ_MERGED;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.WQ_FULL<sp/>=<sp/>ul-&gt;sim_stats.WQ_FULL;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.WQ_TO_CACHE<sp/>=<sp/>ul-&gt;sim_stats.WQ_TO_CACHE;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>ul-&gt;roi_stats.WQ_FORWARD<sp/>=<sp/>ul-&gt;sim_stats.WQ_FORWARD;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CACHE::should_activate_prefetcher(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>pkt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="740"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((1<sp/>&lt;&lt;<sp/>champsim::to_underlying(pkt.type))<sp/>&amp;<sp/>pref_activate_mask)<sp/>&amp;&amp;<sp/>!pkt.prefetch_from_this;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_START<sp/>Exclude<sp/>the<sp/>following<sp/>function<sp/>from<sp/>LCOV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CACHE::print_deadlock()</highlight></codeline>
<codeline lineno="746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>std::string_view<sp/>mshr_write{</highlight><highlight class="stringliteral">&quot;instr_id:<sp/>{}<sp/>address:<sp/>{:#x}<sp/>v_addr:<sp/>{:#x}<sp/>type:<sp/>{}<sp/>event:<sp/>{}&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mshr_pack<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tuple{entry.instr_id,<sp/>entry.address,<sp/>entry.v_address,<sp/>access_type_names.at(champsim::to_underlying(entry.type)),</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry.event_cycle};</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>std::string_view<sp/>tag_check_write{</highlight><highlight class="stringliteral">&quot;instr_id:<sp/>{}<sp/>address:<sp/>{:#x}<sp/>v_addr:<sp/>{:#x}<sp/>is_translated:<sp/>{}<sp/>translate_issued:<sp/>{}<sp/>event_cycle:<sp/>{}&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag_check_pack<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tuple{entry.instr_id,<sp/>entry.address,<sp/>entry.v_address,<sp/>entry.is_translated,<sp/>entry.translate_issued,<sp/>entry.event_cycle};</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>champsim::range_print_deadlock(MSHR,<sp/>NAME<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_MSHR&quot;</highlight><highlight class="normal">,<sp/>mshr_write,<sp/>mshr_pack);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>champsim::range_print_deadlock(inflight_tag_check,<sp/>NAME<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_tags&quot;</highlight><highlight class="normal">,<sp/>tag_check_write,<sp/>tag_check_pack);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>champsim::range_print_deadlock(translation_stash,<sp/>NAME<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_translation&quot;</highlight><highlight class="normal">,<sp/>tag_check_write,<sp/>tag_check_pack);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>std::string_view<sp/>q_writer{</highlight><highlight class="stringliteral">&quot;instr_id:<sp/>{}<sp/>address:<sp/>{:#x}<sp/>v_addr:<sp/>{:#x}<sp/>type:<sp/>{}<sp/>translated:<sp/>{}&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>q_entry_pack<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tuple{entry.instr_id,<sp/>entry.address,<sp/>entry.v_address,<sp/>access_type_names.at(champsim::to_underlying(entry.type)),<sp/>entry.is_translated};</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>ul<sp/>:<sp/>upper_levels)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>champsim::range_print_deadlock(ul-&gt;RQ,<sp/>NAME<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_RQ&quot;</highlight><highlight class="normal">,<sp/>q_writer,<sp/>q_entry_pack);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>champsim::range_print_deadlock(ul-&gt;WQ,<sp/>NAME<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_WQ&quot;</highlight><highlight class="normal">,<sp/>q_writer,<sp/>q_entry_pack);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>champsim::range_print_deadlock(ul-&gt;PQ,<sp/>NAME<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_PQ&quot;</highlight><highlight class="normal">,<sp/>q_writer,<sp/>q_entry_pack);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LCOV_EXCL_STOP</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/github/workspace/src/cache.cc"/>
  </compounddef>
</doxygen>
