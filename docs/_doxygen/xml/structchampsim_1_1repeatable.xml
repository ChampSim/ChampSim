<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="structchampsim_1_1repeatable" kind="struct" language="C++" prot="public">
    <compoundname>champsim::repeatable</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structchampsim_1_1repeatable_1a6561406dc19045618d473baf0f00300e" prot="public" static="no" mutable="no">
        <type>std::tuple&lt; Args... &gt;</type>
        <definition>std::tuple&lt;Args...&gt; champsim::repeatable&lt; T, Args &gt;::args_</definition>
        <argsstring></argsstring>
        <name>args_</name>
        <qualifiedname>champsim::repeatable::args_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/inc/repeatable.h" line="32" column="14" bodyfile="/github/workspace/inc/repeatable.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structchampsim_1_1repeatable_1a1527a46d2a8c4207b3e0a363278fccc8" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T champsim::repeatable&lt; T, Args &gt;::intern_</definition>
        <argsstring></argsstring>
        <name>intern_</name>
        <qualifiedname>champsim::repeatable::intern_</qualifiedname>
        <initializer>{std::apply([](auto... x) { return T{x...}; }, args_)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/inc/repeatable.h" line="33" column="5" bodyfile="/github/workspace/inc/repeatable.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structchampsim_1_1repeatable_1a981d160aee2c3ccffca1924a460353fb" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>champsim::repeatable&lt; T, Args &gt;::repeatable</definition>
        <argsstring>(Args... args)</argsstring>
        <name>repeatable</name>
        <qualifiedname>champsim::repeatable::repeatable</qualifiedname>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/inc/repeatable.h" line="34" column="12" bodyfile="/github/workspace/inc/repeatable.h" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="structchampsim_1_1repeatable_1a346ae89f659540318c312182020aa577" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto champsim::repeatable&lt; T, Args &gt;::operator()</definition>
        <argsstring>()</argsstring>
        <name>operator()</name>
        <qualifiedname>champsim::repeatable::operator()</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/inc/repeatable.h" line="36" column="8" bodyfile="/github/workspace/inc/repeatable.h" bodystart="36" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structchampsim_1_1repeatable_1a62866ff965470cbbee9f3a80732e6ad5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool champsim::repeatable&lt; T, Args &gt;::eof</definition>
        <argsstring>() const</argsstring>
        <name>eof</name>
        <qualifiedname>champsim::repeatable::eof</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/inc/repeatable.h" line="47" column="8" bodyfile="/github/workspace/inc/repeatable.h" bodystart="47" bodyend="47"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/github/workspace/inc/repeatable.h" line="29" column="1" bodyfile="/github/workspace/inc/repeatable.h" bodystart="29" bodyend="48"/>
    <listofallmembers>
      <member refid="structchampsim_1_1repeatable_1a6561406dc19045618d473baf0f00300e" prot="public" virt="non-virtual"><scope>champsim::repeatable</scope><name>args_</name></member>
      <member refid="structchampsim_1_1repeatable_1a62866ff965470cbbee9f3a80732e6ad5" prot="public" virt="non-virtual"><scope>champsim::repeatable</scope><name>eof</name></member>
      <member refid="structchampsim_1_1repeatable_1a1527a46d2a8c4207b3e0a363278fccc8" prot="public" virt="non-virtual"><scope>champsim::repeatable</scope><name>intern_</name></member>
      <member refid="structchampsim_1_1repeatable_1a346ae89f659540318c312182020aa577" prot="public" virt="non-virtual"><scope>champsim::repeatable</scope><name>operator()</name></member>
      <member refid="structchampsim_1_1repeatable_1a981d160aee2c3ccffca1924a460353fb" prot="public" virt="non-virtual"><scope>champsim::repeatable</scope><name>repeatable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
